{"_default": {"1": {"key": "https://github.com/CoolerVoid/0d1n", "value": {"success": false, "incomplete": true}}, "2": {"key": "https://github.com/CoolerVoid/0d1n", "value": {"success": false, "incomplete": true}}, "3": {"key": "http://jon.oberheide.org/0trace/", "value": {"title": "0trace.py | Jon Oberheide", "byline": "Jon Oberheide", "dir": null, "lang": "en", "content": "<div id=\"readability-page-1\" class=\"page\"><div>\n<h2 id=\"description\">Description</h2>\n<p>0trace.py is a python port of <a href=\"http://lcamtuf.coredump.cx/\">Michal Zalewski\u2019s</a> 0trace hop enumeration tool. 0trace was originally announced on <a href=\"http://www.securityfocus.com/archive/1/456213/30/0/threaded\">Bugtraq</a> on January 6th:</p>\n<pre><code>I'd like to announce the availability of a free security reconnaissance /\nfirewall bypassing tool called 0trace. This tool enables the user to\nperform hop enumeration (\"traceroute\") within an established TCP\nconnection, such as a HTTP or SMTP session. This is opposed to sending\nstray packets, as traceroute-type tools usually do.\n\nThe important benefit of using an established connection and matching TCP\npackets to send a TTL-based probe is that such traffic is happily allowed\nthrough by many stateful firewalls and other defenses without further\ninspection (since it is related to an entry in the connection table).\n</code></pre>\n<h2 id=\"dependencies\">Dependencies</h2>\n<ul>\n<li><a href=\"http://libdnet.sourceforge.net/\">dnet</a></li>\n<li><a href=\"http://www.monkey.org/~dugsong/dpkt/\">dpkt</a></li>\n<li><a href=\"http://www.monkey.org/~dugsong/pypcap/\">pypcap</a></li>\n</ul>\n<h2 id=\"download\">Download</h2>\n<p>Downloads have been archived.</p>\n<h2 id=\"example-run\">Example Run</h2>\n<ul>\n<li><strong>Open a TCP connection</strong> - telnet 66.135.192.87 80</li>\n<li><strong>Start 0trace.py</strong> - ./0trace.py eth0 66.135.192.87 80</li>\n<li><strong>Initiate some TCP activity in telnet session</strong> - GET / HTTP/1.0</li>\n</ul>\n<!-- raw HTML omitted -->\n<pre><code>[+] Waiting for traffic from target on eth0...\n[+] Traffic acquired, waiting for a gap...\n[+] Target acquired: 192.168.0.10:54403 -&gt; 66.135.192.87:80 (3736223256/873025975)\n[+] Setting up a sniffer...\n[+] Sending probes...\n\nTRACE RESULTS\n-------------\n1 192.168.0.1\n3 68.87.187.29\n4 68.87.190.161\n5 68.87.190.157\n6 68.87.190.153\n7 68.87.190.149\n8 68.87.190.145\n9 68.87.190.141\n10 68.87.191.145\n11 12.116.11.101\n12 12.123.139.150\n13 12.122.10.134\n14 12.123.4.249\n15 192.205.33.158\n16 144.232.20.20\n17 144.232.26.109\n18 144.232.20.161\n19 144.232.15.142\n20 144.232.20.141\n21 144.232.20.113\n22 144.232.0.250\n23 144.228.110.122\n24 66.135.207.186\nTarget reached.\n</code></pre>\n\n\n      </div></div>", "textContent": "\nDescription\n0trace.py is a python port of Michal Zalewski\u2019s 0trace hop enumeration tool. 0trace was originally announced on Bugtraq on January 6th:\nI'd like to announce the availability of a free security reconnaissance /\nfirewall bypassing tool called 0trace. This tool enables the user to\nperform hop enumeration (\"traceroute\") within an established TCP\nconnection, such as a HTTP or SMTP session. This is opposed to sending\nstray packets, as traceroute-type tools usually do.\n\nThe important benefit of using an established connection and matching TCP\npackets to send a TTL-based probe is that such traffic is happily allowed\nthrough by many stateful firewalls and other defenses without further\ninspection (since it is related to an entry in the connection table).\n\nDependencies\n\ndnet\ndpkt\npypcap\n\nDownload\nDownloads have been archived.\nExample Run\n\nOpen a TCP connection - telnet 66.135.192.87 80\nStart 0trace.py - ./0trace.py eth0 66.135.192.87 80\nInitiate some TCP activity in telnet session - GET / HTTP/1.0\n\n\n[+] Waiting for traffic from target on eth0...\n[+] Traffic acquired, waiting for a gap...\n[+] Target acquired: 192.168.0.10:54403 -> 66.135.192.87:80 (3736223256/873025975)\n[+] Setting up a sniffer...\n[+] Sending probes...\n\nTRACE RESULTS\n-------------\n1 192.168.0.1\n3 68.87.187.29\n4 68.87.190.161\n5 68.87.190.157\n6 68.87.190.153\n7 68.87.190.149\n8 68.87.190.145\n9 68.87.190.141\n10 68.87.191.145\n11 12.116.11.101\n12 12.123.139.150\n13 12.122.10.134\n14 12.123.4.249\n15 192.205.33.158\n16 144.232.20.20\n17 144.232.26.109\n18 144.232.20.161\n19 144.232.15.142\n20 144.232.20.141\n21 144.232.20.113\n22 144.232.0.250\n23 144.228.110.122\n24 66.135.207.186\nTarget reached.\n\n\n\n      ", "length": 1684, "excerpt": "Jon Oberheide's website", "siteName": null, "success": false, "incomplete": true}}}}