{"_default": {"1": {"key": "https://github.com/CoolerVoid/0d1n", "value": {"success": false, "incomplete": true}}, "2": {"key": "https://github.com/CoolerVoid/0d1n", "value": {"success": false, "incomplete": true}}, "3": {"key": "http://jon.oberheide.org/0trace/", "value": {"title": "0trace.py | Jon Oberheide", "byline": "Jon Oberheide", "dir": null, "lang": "en", "content": "<div id=\"readability-page-1\" class=\"page\"><div>\n<h2 id=\"description\">Description</h2>\n<p>0trace.py is a python port of <a href=\"http://lcamtuf.coredump.cx/\">Michal Zalewski\u2019s</a> 0trace hop enumeration tool. 0trace was originally announced on <a href=\"http://www.securityfocus.com/archive/1/456213/30/0/threaded\">Bugtraq</a> on January 6th:</p>\n<pre><code>I'd like to announce the availability of a free security reconnaissance /\nfirewall bypassing tool called 0trace. This tool enables the user to\nperform hop enumeration (\"traceroute\") within an established TCP\nconnection, such as a HTTP or SMTP session. This is opposed to sending\nstray packets, as traceroute-type tools usually do.\n\nThe important benefit of using an established connection and matching TCP\npackets to send a TTL-based probe is that such traffic is happily allowed\nthrough by many stateful firewalls and other defenses without further\ninspection (since it is related to an entry in the connection table).\n</code></pre>\n<h2 id=\"dependencies\">Dependencies</h2>\n<ul>\n<li><a href=\"http://libdnet.sourceforge.net/\">dnet</a></li>\n<li><a href=\"http://www.monkey.org/~dugsong/dpkt/\">dpkt</a></li>\n<li><a href=\"http://www.monkey.org/~dugsong/pypcap/\">pypcap</a></li>\n</ul>\n<h2 id=\"download\">Download</h2>\n<p>Downloads have been archived.</p>\n<h2 id=\"example-run\">Example Run</h2>\n<ul>\n<li><strong>Open a TCP connection</strong> - telnet 66.135.192.87 80</li>\n<li><strong>Start 0trace.py</strong> - ./0trace.py eth0 66.135.192.87 80</li>\n<li><strong>Initiate some TCP activity in telnet session</strong> - GET / HTTP/1.0</li>\n</ul>\n<!-- raw HTML omitted -->\n<pre><code>[+] Waiting for traffic from target on eth0...\n[+] Traffic acquired, waiting for a gap...\n[+] Target acquired: 192.168.0.10:54403 -&gt; 66.135.192.87:80 (3736223256/873025975)\n[+] Setting up a sniffer...\n[+] Sending probes...\n\nTRACE RESULTS\n-------------\n1 192.168.0.1\n3 68.87.187.29\n4 68.87.190.161\n5 68.87.190.157\n6 68.87.190.153\n7 68.87.190.149\n8 68.87.190.145\n9 68.87.190.141\n10 68.87.191.145\n11 12.116.11.101\n12 12.123.139.150\n13 12.122.10.134\n14 12.123.4.249\n15 192.205.33.158\n16 144.232.20.20\n17 144.232.26.109\n18 144.232.20.161\n19 144.232.15.142\n20 144.232.20.141\n21 144.232.20.113\n22 144.232.0.250\n23 144.228.110.122\n24 66.135.207.186\nTarget reached.\n</code></pre>\n\n\n      </div></div>", "textContent": "\nDescription\n0trace.py is a python port of Michal Zalewski\u2019s 0trace hop enumeration tool. 0trace was originally announced on Bugtraq on January 6th:\nI'd like to announce the availability of a free security reconnaissance /\nfirewall bypassing tool called 0trace. This tool enables the user to\nperform hop enumeration (\"traceroute\") within an established TCP\nconnection, such as a HTTP or SMTP session. This is opposed to sending\nstray packets, as traceroute-type tools usually do.\n\nThe important benefit of using an established connection and matching TCP\npackets to send a TTL-based probe is that such traffic is happily allowed\nthrough by many stateful firewalls and other defenses without further\ninspection (since it is related to an entry in the connection table).\n\nDependencies\n\ndnet\ndpkt\npypcap\n\nDownload\nDownloads have been archived.\nExample Run\n\nOpen a TCP connection - telnet 66.135.192.87 80\nStart 0trace.py - ./0trace.py eth0 66.135.192.87 80\nInitiate some TCP activity in telnet session - GET / HTTP/1.0\n\n\n[+] Waiting for traffic from target on eth0...\n[+] Traffic acquired, waiting for a gap...\n[+] Target acquired: 192.168.0.10:54403 -> 66.135.192.87:80 (3736223256/873025975)\n[+] Setting up a sniffer...\n[+] Sending probes...\n\nTRACE RESULTS\n-------------\n1 192.168.0.1\n3 68.87.187.29\n4 68.87.190.161\n5 68.87.190.157\n6 68.87.190.153\n7 68.87.190.149\n8 68.87.190.145\n9 68.87.190.141\n10 68.87.191.145\n11 12.116.11.101\n12 12.123.139.150\n13 12.122.10.134\n14 12.123.4.249\n15 192.205.33.158\n16 144.232.20.20\n17 144.232.26.109\n18 144.232.20.161\n19 144.232.15.142\n20 144.232.20.141\n21 144.232.20.113\n22 144.232.0.250\n23 144.228.110.122\n24 66.135.207.186\nTarget reached.\n\n\n\n      ", "length": 1684, "excerpt": "Jon Oberheide's website", "siteName": null, "success": false, "incomplete": true}}, "4": {"key": "https://github.com/CoolerVoid/0d1n", "value": {"title": "GitHub - CoolerVoid/0d1n: Tool for automating customized attacks against web applications. Fully made in C language with pthreads, it has fast performance.", "byline": "CoolerVoid", "dir": null, "lang": "en", "content": "<div id=\"readability-page-1\" class=\"page\"><div data-target=\"readme-toc.content\">\n            <article itemprop=\"text\"><h2 dir=\"auto\">0d1n</h2>\n<hr>\n<p dir=\"auto\">0d1n is a tool for automating customized attacks against web applications.\nThis tool is significantly faster because it uses thread pool and C language.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/overview1.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/overview1.png\" alt=\"Alt text\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/tables.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/tables.png\" alt=\"Alt text\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/datatables.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/datatables.png\" alt=\"Alt text\"></a>\n0d1n is a tool for automating customized attacks against web applications.\nVideo demo: <a href=\"https://www.youtube.com/watch?v=1L22mbbVge0\" rel=\"nofollow\">https://www.youtube.com/watch?v=1L22mbbVge0</a></p>\n<h2 dir=\"auto\">Tool functions:</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Brute force login and passwords in auth forms</p>\n</li>\n<li>\n<p dir=\"auto\">Directory disclosure ( use PATH list to the brute, and find HTTP status code )</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find SQL Injection and XSS vulnerabilities</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find SSRF</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find Command injection</p>\n</li>\n<li>\n<p dir=\"auto\">Options to load ANTI-CSRF token each request</p>\n</li>\n<li>\n<p dir=\"auto\">Options to use random proxy per request</p>\n</li>\n<li>\n<p dir=\"auto\">Options to use random useragent  per request</p>\n</li>\n<li>\n<p dir=\"auto\">Option for keep alive test (slowloris test)</p>\n</li>\n<li>\n<p dir=\"auto\">other functions.</p>\n</li>\n</ul>\n<h2 dir=\"auto\">To run and install, follow these steps:</h2>\n<p dir=\"auto\">require libcurl-dev or libcurl-devel(on rpm linux based)</p>\n<p dir=\"auto\">$ git clone <a href=\"https://github.com/CoolerVoid/0d1n/\">https://github.com/CoolerVoid/0d1n/</a></p>\n<p dir=\"auto\">It would be best if you had lib curl to run. Look at the following to install:</p>\n<div data-snippet-clipboard-copy-content=\"$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\"><pre><code>$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\n</code></pre></div>\n<p dir=\"auto\">To install follow this cmd:</p>\n<div data-snippet-clipboard-copy-content=\"$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \"><pre><code>$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \n</code></pre></div>\n<p dir=\"auto\">Up the view server to look at the reports online:</p>\n\n<p dir=\"auto\">Now in another console, you can run the tool:</p>\n\n<h2 dir=\"auto\">If you need to uninstall, follow these steps:</h2>\n<div data-snippet-clipboard-copy-content=\"$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\"><pre><code>$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\n</code></pre></div>\n<h2 dir=\"auto\">Attack examples:</h2>\n<p dir=\"auto\">Brute force to find the directory</p>\n<div data-snippet-clipboard-copy-content=\"$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\"><pre><code>$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\n</code></pre></div>\n<p dir=\"auto\">Note: You can change the value of threads. If you have a good machine, you can try 800, 1200 each device has a different context.</p>\n<p dir=\"auto\">For SQL injection attack</p>\n<div data-snippet-clipboard-copy-content=\"$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n&quot;\"><pre><code>$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n\"\n</code></pre></div>\n<p dir=\"auto\">Note: Tamper is a resource to try to bypass the web application firewall</p>\n<p dir=\"auto\">To brute force auth system</p>\n<div data-snippet-clipboard-copy-content=\"0d1n --host 'http://site.com/auth.py' --post 'user=admin&amp;password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n&quot;\"><pre><code>0d1n --host 'http://site.com/auth.py' --post 'user=admin&amp;password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n\"\n</code></pre></div>\n<p dir=\"auto\">Note: if you have a csrf token, you can use argv to get this token for each request and brute.</p>\n<p dir=\"auto\">Search SQLi in hard mode in login system with csrf token:</p>\n<div data-snippet-clipboard-copy-content=\"0d1n  --host &quot;http://127.0.0.1/vulnerabilities/sqli/index.php?id=^&quot; --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\"><pre><code>0d1n  --host \"http://127.0.0.1/vulnerabilities/sqli/index.php?id=^\" --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\n</code></pre></div>\n<p dir=\"auto\">Note: Load the cookies jar from the browser and save in cookies.txt to load.</p>\n<h2 dir=\"auto\">Notes External libs</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">To gain extreme performance, 0d1n uses a thread pool of POSIX threads. You can study this small library:\n<a href=\"https://github.com/Pithikos/C-Thread-Pool\">https://github.com/Pithikos/C-Thread-Pool</a></p>\n</li>\n<li>\n<p dir=\"auto\">The 0d1n uses OpenBSD/NetBSD functions to work with strings something like strlcat() and strlcpy() to prevent buffer overflow.\n<a href=\"https://man.openbsd.org/strlcpy.3\" rel=\"nofollow\">https://man.openbsd.org/strlcpy.3</a></p>\n</li>\n</ul>\n<h2 dir=\"auto\">Project Overview on cloc</h2>\n<div data-snippet-clipboard-copy-content=\"cooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\"><pre><code>cooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\n</code></pre></div>\n<p dir=\"auto\">Read the docs, and help menu when you execute the \"0d1n\" binary...</p>\n<p dir=\"auto\">Do you have any doubt about 0d1n? Please create an issue in this repository. I can help you.</p>\n<h2 dir=\"auto\">To study  old versions, look at the following:</h2>\n<p dir=\"auto\"><a href=\"http://sourceforge.net/projects/odin-security-tool/files/?source=navbar\" rel=\"nofollow\">http://sourceforge.net/projects/odin-security-tool/files/?source=navbar</a></p>\n<h2 dir=\"auto\">Point of attention</h2>\n<p dir=\"auto\">The purpose of this tool is to use in pentest, take attention if you have a proper authorization before to use that. I do not have responsibility for your actions. You can use a hammer to construct a house or destroy it, choose the law path, don't be a bad guy, remember.</p>\n</article>\n          </div></div>", "textContent": "\n            0d1n\n\n0d1n is a tool for automating customized attacks against web applications.\nThis tool is significantly faster because it uses thread pool and C language.\n\n\n\n0d1n is a tool for automating customized attacks against web applications.\nVideo demo: https://www.youtube.com/watch?v=1L22mbbVge0\nTool functions:\n\n\nBrute force login and passwords in auth forms\n\n\nDirectory disclosure ( use PATH list to the brute, and find HTTP status code )\n\n\nTest to find SQL Injection and XSS vulnerabilities\n\n\nTest to find SSRF\n\n\nTest to find Command injection\n\n\nOptions to load ANTI-CSRF token each request\n\n\nOptions to use random proxy per request\n\n\nOptions to use random useragent  per request\n\n\nOption for keep alive test (slowloris test)\n\n\nother functions.\n\n\nTo run and install, follow these steps:\nrequire libcurl-dev or libcurl-devel(on rpm linux based)\n$ git clone https://github.com/CoolerVoid/0d1n/\nIt would be best if you had lib curl to run. Look at the following to install:\n$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\n\nTo install follow this cmd:\n$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \n\nUp the view server to look at the reports online:\n\nNow in another console, you can run the tool:\n\nIf you need to uninstall, follow these steps:\n$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\n\nAttack examples:\nBrute force to find the directory\n$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\n\nNote: You can change the value of threads. If you have a good machine, you can try 800, 1200 each device has a different context.\nFor SQL injection attack\n$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n\"\n\nNote: Tamper is a resource to try to bypass the web application firewall\nTo brute force auth system\n0d1n --host 'http://site.com/auth.py' --post 'user=admin&password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n\"\n\nNote: if you have a csrf token, you can use argv to get this token for each request and brute.\nSearch SQLi in hard mode in login system with csrf token:\n0d1n  --host \"http://127.0.0.1/vulnerabilities/sqli/index.php?id=^\" --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\n\nNote: Load the cookies jar from the browser and save in cookies.txt to load.\nNotes External libs\n\n\nTo gain extreme performance, 0d1n uses a thread pool of POSIX threads. You can study this small library:\nhttps://github.com/Pithikos/C-Thread-Pool\n\n\nThe 0d1n uses OpenBSD/NetBSD functions to work with strings something like strlcat() and strlcpy() to prevent buffer overflow.\nhttps://man.openbsd.org/strlcpy.3\n\n\nProject Overview on cloc\ncooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\n\nRead the docs, and help menu when you execute the \"0d1n\" binary...\nDo you have any doubt about 0d1n? Please create an issue in this repository. I can help you.\nTo study  old versions, look at the following:\nhttp://sourceforge.net/projects/odin-security-tool/files/?source=navbar\nPoint of attention\nThe purpose of this tool is to use in pentest, take attention if you have a proper authorization before to use that. I do not have responsibility for your actions. You can use a hammer to construct a house or destroy it, choose the law path, don't be a bad guy, remember.\n\n          ", "length": 5121, "excerpt": "Tool for automating customized attacks against web applications. Fully made in C language with pthreads, it has fast performance.  - GitHub - CoolerVoid/0d1n: Tool for automating customized attacks...", "siteName": "GitHub", "success": false, "incomplete": true}}, "5": {"key": "http://jon.oberheide.org/0trace/", "value": {"title": "0trace.py | Jon Oberheide", "byline": "Jon Oberheide", "dir": null, "lang": "en", "content": "<div id=\"readability-page-1\" class=\"page\"><div>\n<h2 id=\"description\">Description</h2>\n<p>0trace.py is a python port of <a href=\"http://lcamtuf.coredump.cx/\">Michal Zalewski\u2019s</a> 0trace hop enumeration tool. 0trace was originally announced on <a href=\"http://www.securityfocus.com/archive/1/456213/30/0/threaded\">Bugtraq</a> on January 6th:</p>\n<pre><code>I'd like to announce the availability of a free security reconnaissance /\nfirewall bypassing tool called 0trace. This tool enables the user to\nperform hop enumeration (\"traceroute\") within an established TCP\nconnection, such as a HTTP or SMTP session. This is opposed to sending\nstray packets, as traceroute-type tools usually do.\n\nThe important benefit of using an established connection and matching TCP\npackets to send a TTL-based probe is that such traffic is happily allowed\nthrough by many stateful firewalls and other defenses without further\ninspection (since it is related to an entry in the connection table).\n</code></pre>\n<h2 id=\"dependencies\">Dependencies</h2>\n<ul>\n<li><a href=\"http://libdnet.sourceforge.net/\">dnet</a></li>\n<li><a href=\"http://www.monkey.org/~dugsong/dpkt/\">dpkt</a></li>\n<li><a href=\"http://www.monkey.org/~dugsong/pypcap/\">pypcap</a></li>\n</ul>\n<h2 id=\"download\">Download</h2>\n<p>Downloads have been archived.</p>\n<h2 id=\"example-run\">Example Run</h2>\n<ul>\n<li><strong>Open a TCP connection</strong> - telnet 66.135.192.87 80</li>\n<li><strong>Start 0trace.py</strong> - ./0trace.py eth0 66.135.192.87 80</li>\n<li><strong>Initiate some TCP activity in telnet session</strong> - GET / HTTP/1.0</li>\n</ul>\n<!-- raw HTML omitted -->\n<pre><code>[+] Waiting for traffic from target on eth0...\n[+] Traffic acquired, waiting for a gap...\n[+] Target acquired: 192.168.0.10:54403 -&gt; 66.135.192.87:80 (3736223256/873025975)\n[+] Setting up a sniffer...\n[+] Sending probes...\n\nTRACE RESULTS\n-------------\n1 192.168.0.1\n3 68.87.187.29\n4 68.87.190.161\n5 68.87.190.157\n6 68.87.190.153\n7 68.87.190.149\n8 68.87.190.145\n9 68.87.190.141\n10 68.87.191.145\n11 12.116.11.101\n12 12.123.139.150\n13 12.122.10.134\n14 12.123.4.249\n15 192.205.33.158\n16 144.232.20.20\n17 144.232.26.109\n18 144.232.20.161\n19 144.232.15.142\n20 144.232.20.141\n21 144.232.20.113\n22 144.232.0.250\n23 144.228.110.122\n24 66.135.207.186\nTarget reached.\n</code></pre>\n\n\n      </div></div>", "textContent": "\nDescription\n0trace.py is a python port of Michal Zalewski\u2019s 0trace hop enumeration tool. 0trace was originally announced on Bugtraq on January 6th:\nI'd like to announce the availability of a free security reconnaissance /\nfirewall bypassing tool called 0trace. This tool enables the user to\nperform hop enumeration (\"traceroute\") within an established TCP\nconnection, such as a HTTP or SMTP session. This is opposed to sending\nstray packets, as traceroute-type tools usually do.\n\nThe important benefit of using an established connection and matching TCP\npackets to send a TTL-based probe is that such traffic is happily allowed\nthrough by many stateful firewalls and other defenses without further\ninspection (since it is related to an entry in the connection table).\n\nDependencies\n\ndnet\ndpkt\npypcap\n\nDownload\nDownloads have been archived.\nExample Run\n\nOpen a TCP connection - telnet 66.135.192.87 80\nStart 0trace.py - ./0trace.py eth0 66.135.192.87 80\nInitiate some TCP activity in telnet session - GET / HTTP/1.0\n\n\n[+] Waiting for traffic from target on eth0...\n[+] Traffic acquired, waiting for a gap...\n[+] Target acquired: 192.168.0.10:54403 -> 66.135.192.87:80 (3736223256/873025975)\n[+] Setting up a sniffer...\n[+] Sending probes...\n\nTRACE RESULTS\n-------------\n1 192.168.0.1\n3 68.87.187.29\n4 68.87.190.161\n5 68.87.190.157\n6 68.87.190.153\n7 68.87.190.149\n8 68.87.190.145\n9 68.87.190.141\n10 68.87.191.145\n11 12.116.11.101\n12 12.123.139.150\n13 12.122.10.134\n14 12.123.4.249\n15 192.205.33.158\n16 144.232.20.20\n17 144.232.26.109\n18 144.232.20.161\n19 144.232.15.142\n20 144.232.20.141\n21 144.232.20.113\n22 144.232.0.250\n23 144.228.110.122\n24 66.135.207.186\nTarget reached.\n\n\n\n      ", "length": 1684, "excerpt": "Jon Oberheide's website", "siteName": null, "success": false, "incomplete": true}}, "6": {"key": "https://github.com/CoolerVoid/0d1n", "value": {"title": "GitHub - CoolerVoid/0d1n: Tool for automating customized attacks against web applications. Fully made in C language with pthreads, it has fast performance.", "byline": "CoolerVoid", "dir": null, "lang": "en", "content": "<div id=\"readability-page-1\" class=\"page\"><div data-target=\"readme-toc.content\">\n            <article itemprop=\"text\"><h2 dir=\"auto\">0d1n</h2>\n<hr>\n<p dir=\"auto\">0d1n is a tool for automating customized attacks against web applications.\nThis tool is significantly faster because it uses thread pool and C language.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/overview1.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/overview1.png\" alt=\"Alt text\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/tables.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/tables.png\" alt=\"Alt text\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/datatables.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/datatables.png\" alt=\"Alt text\"></a>\n0d1n is a tool for automating customized attacks against web applications.\nVideo demo: <a href=\"https://www.youtube.com/watch?v=1L22mbbVge0\" rel=\"nofollow\">https://www.youtube.com/watch?v=1L22mbbVge0</a></p>\n<h2 dir=\"auto\">Tool functions:</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Brute force login and passwords in auth forms</p>\n</li>\n<li>\n<p dir=\"auto\">Directory disclosure ( use PATH list to the brute, and find HTTP status code )</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find SQL Injection and XSS vulnerabilities</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find SSRF</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find Command injection</p>\n</li>\n<li>\n<p dir=\"auto\">Options to load ANTI-CSRF token each request</p>\n</li>\n<li>\n<p dir=\"auto\">Options to use random proxy per request</p>\n</li>\n<li>\n<p dir=\"auto\">Options to use random useragent  per request</p>\n</li>\n<li>\n<p dir=\"auto\">Option for keep alive test (slowloris test)</p>\n</li>\n<li>\n<p dir=\"auto\">other functions.</p>\n</li>\n</ul>\n<h2 dir=\"auto\">To run and install, follow these steps:</h2>\n<p dir=\"auto\">require libcurl-dev or libcurl-devel(on rpm linux based)</p>\n<p dir=\"auto\">$ git clone <a href=\"https://github.com/CoolerVoid/0d1n/\">https://github.com/CoolerVoid/0d1n/</a></p>\n<p dir=\"auto\">It would be best if you had lib curl to run. Look at the following to install:</p>\n<div data-snippet-clipboard-copy-content=\"$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\"><pre><code>$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\n</code></pre></div>\n<p dir=\"auto\">To install follow this cmd:</p>\n<div data-snippet-clipboard-copy-content=\"$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \"><pre><code>$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \n</code></pre></div>\n<p dir=\"auto\">Up the view server to look at the reports online:</p>\n\n<p dir=\"auto\">Now in another console, you can run the tool:</p>\n\n<h2 dir=\"auto\">If you need to uninstall, follow these steps:</h2>\n<div data-snippet-clipboard-copy-content=\"$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\"><pre><code>$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\n</code></pre></div>\n<h2 dir=\"auto\">Attack examples:</h2>\n<p dir=\"auto\">Brute force to find the directory</p>\n<div data-snippet-clipboard-copy-content=\"$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\"><pre><code>$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\n</code></pre></div>\n<p dir=\"auto\">Note: You can change the value of threads. If you have a good machine, you can try 800, 1200 each device has a different context.</p>\n<p dir=\"auto\">For SQL injection attack</p>\n<div data-snippet-clipboard-copy-content=\"$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n&quot;\"><pre><code>$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n\"\n</code></pre></div>\n<p dir=\"auto\">Note: Tamper is a resource to try to bypass the web application firewall</p>\n<p dir=\"auto\">To brute force auth system</p>\n<div data-snippet-clipboard-copy-content=\"0d1n --host 'http://site.com/auth.py' --post 'user=admin&amp;password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n&quot;\"><pre><code>0d1n --host 'http://site.com/auth.py' --post 'user=admin&amp;password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n\"\n</code></pre></div>\n<p dir=\"auto\">Note: if you have a csrf token, you can use argv to get this token for each request and brute.</p>\n<p dir=\"auto\">Search SQLi in hard mode in login system with csrf token:</p>\n<div data-snippet-clipboard-copy-content=\"0d1n  --host &quot;http://127.0.0.1/vulnerabilities/sqli/index.php?id=^&quot; --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\"><pre><code>0d1n  --host \"http://127.0.0.1/vulnerabilities/sqli/index.php?id=^\" --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\n</code></pre></div>\n<p dir=\"auto\">Note: Load the cookies jar from the browser and save in cookies.txt to load.</p>\n<h2 dir=\"auto\">Notes External libs</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">To gain extreme performance, 0d1n uses a thread pool of POSIX threads. You can study this small library:\n<a href=\"https://github.com/Pithikos/C-Thread-Pool\">https://github.com/Pithikos/C-Thread-Pool</a></p>\n</li>\n<li>\n<p dir=\"auto\">The 0d1n uses OpenBSD/NetBSD functions to work with strings something like strlcat() and strlcpy() to prevent buffer overflow.\n<a href=\"https://man.openbsd.org/strlcpy.3\" rel=\"nofollow\">https://man.openbsd.org/strlcpy.3</a></p>\n</li>\n</ul>\n<h2 dir=\"auto\">Project Overview on cloc</h2>\n<div data-snippet-clipboard-copy-content=\"cooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\"><pre><code>cooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\n</code></pre></div>\n<p dir=\"auto\">Read the docs, and help menu when you execute the \"0d1n\" binary...</p>\n<p dir=\"auto\">Do you have any doubt about 0d1n? Please create an issue in this repository. I can help you.</p>\n<h2 dir=\"auto\">To study  old versions, look at the following:</h2>\n<p dir=\"auto\"><a href=\"http://sourceforge.net/projects/odin-security-tool/files/?source=navbar\" rel=\"nofollow\">http://sourceforge.net/projects/odin-security-tool/files/?source=navbar</a></p>\n<h2 dir=\"auto\">Point of attention</h2>\n<p dir=\"auto\">The purpose of this tool is to use in pentest, take attention if you have a proper authorization before to use that. I do not have responsibility for your actions. You can use a hammer to construct a house or destroy it, choose the law path, don't be a bad guy, remember.</p>\n</article>\n          </div></div>", "textContent": "\n            0d1n\n\n0d1n is a tool for automating customized attacks against web applications.\nThis tool is significantly faster because it uses thread pool and C language.\n\n\n\n0d1n is a tool for automating customized attacks against web applications.\nVideo demo: https://www.youtube.com/watch?v=1L22mbbVge0\nTool functions:\n\n\nBrute force login and passwords in auth forms\n\n\nDirectory disclosure ( use PATH list to the brute, and find HTTP status code )\n\n\nTest to find SQL Injection and XSS vulnerabilities\n\n\nTest to find SSRF\n\n\nTest to find Command injection\n\n\nOptions to load ANTI-CSRF token each request\n\n\nOptions to use random proxy per request\n\n\nOptions to use random useragent  per request\n\n\nOption for keep alive test (slowloris test)\n\n\nother functions.\n\n\nTo run and install, follow these steps:\nrequire libcurl-dev or libcurl-devel(on rpm linux based)\n$ git clone https://github.com/CoolerVoid/0d1n/\nIt would be best if you had lib curl to run. Look at the following to install:\n$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\n\nTo install follow this cmd:\n$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \n\nUp the view server to look at the reports online:\n\nNow in another console, you can run the tool:\n\nIf you need to uninstall, follow these steps:\n$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\n\nAttack examples:\nBrute force to find the directory\n$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\n\nNote: You can change the value of threads. If you have a good machine, you can try 800, 1200 each device has a different context.\nFor SQL injection attack\n$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n\"\n\nNote: Tamper is a resource to try to bypass the web application firewall\nTo brute force auth system\n0d1n --host 'http://site.com/auth.py' --post 'user=admin&password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n\"\n\nNote: if you have a csrf token, you can use argv to get this token for each request and brute.\nSearch SQLi in hard mode in login system with csrf token:\n0d1n  --host \"http://127.0.0.1/vulnerabilities/sqli/index.php?id=^\" --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\n\nNote: Load the cookies jar from the browser and save in cookies.txt to load.\nNotes External libs\n\n\nTo gain extreme performance, 0d1n uses a thread pool of POSIX threads. You can study this small library:\nhttps://github.com/Pithikos/C-Thread-Pool\n\n\nThe 0d1n uses OpenBSD/NetBSD functions to work with strings something like strlcat() and strlcpy() to prevent buffer overflow.\nhttps://man.openbsd.org/strlcpy.3\n\n\nProject Overview on cloc\ncooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\n\nRead the docs, and help menu when you execute the \"0d1n\" binary...\nDo you have any doubt about 0d1n? Please create an issue in this repository. I can help you.\nTo study  old versions, look at the following:\nhttp://sourceforge.net/projects/odin-security-tool/files/?source=navbar\nPoint of attention\nThe purpose of this tool is to use in pentest, take attention if you have a proper authorization before to use that. I do not have responsibility for your actions. You can use a hammer to construct a house or destroy it, choose the law path, don't be a bad guy, remember.\n\n          ", "length": 5121, "excerpt": "Tool for automating customized attacks against web applications. Fully made in C language with pthreads, it has fast performance.  - GitHub - CoolerVoid/0d1n: Tool for automating customized attacks...", "siteName": "GitHub", "success": false, "incomplete": true}}, "7": {"key": "https://github.com/CoolerVoid/0d1n", "value": {"title": "GitHub - CoolerVoid/0d1n: Tool for automating customized attacks against web applications. Fully made in C language with pthreads, it has fast performance.", "byline": "CoolerVoid", "dir": null, "lang": "en", "content": "<div id=\"readability-page-1\" class=\"page\"><div data-target=\"readme-toc.content\">\n            <article itemprop=\"text\"><h2 dir=\"auto\">0d1n</h2>\n<hr>\n<p dir=\"auto\">0d1n is a tool for automating customized attacks against web applications.\nThis tool is significantly faster because it uses thread pool and C language.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/overview1.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/overview1.png\" alt=\"Alt text\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/tables.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/tables.png\" alt=\"Alt text\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/datatables.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/datatables.png\" alt=\"Alt text\"></a>\n0d1n is a tool for automating customized attacks against web applications.\nVideo demo: <a href=\"https://www.youtube.com/watch?v=1L22mbbVge0\" rel=\"nofollow\">https://www.youtube.com/watch?v=1L22mbbVge0</a></p>\n<h2 dir=\"auto\">Tool functions:</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Brute force login and passwords in auth forms</p>\n</li>\n<li>\n<p dir=\"auto\">Directory disclosure ( use PATH list to the brute, and find HTTP status code )</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find SQL Injection and XSS vulnerabilities</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find SSRF</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find Command injection</p>\n</li>\n<li>\n<p dir=\"auto\">Options to load ANTI-CSRF token each request</p>\n</li>\n<li>\n<p dir=\"auto\">Options to use random proxy per request</p>\n</li>\n<li>\n<p dir=\"auto\">Options to use random useragent  per request</p>\n</li>\n<li>\n<p dir=\"auto\">Option for keep alive test (slowloris test)</p>\n</li>\n<li>\n<p dir=\"auto\">other functions.</p>\n</li>\n</ul>\n<h2 dir=\"auto\">To run and install, follow these steps:</h2>\n<p dir=\"auto\">require libcurl-dev or libcurl-devel(on rpm linux based)</p>\n<p dir=\"auto\">$ git clone <a href=\"https://github.com/CoolerVoid/0d1n/\">https://github.com/CoolerVoid/0d1n/</a></p>\n<p dir=\"auto\">It would be best if you had lib curl to run. Look at the following to install:</p>\n<div data-snippet-clipboard-copy-content=\"$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\"><pre><code>$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\n</code></pre></div>\n<p dir=\"auto\">To install follow this cmd:</p>\n<div data-snippet-clipboard-copy-content=\"$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \"><pre><code>$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \n</code></pre></div>\n<p dir=\"auto\">Up the view server to look at the reports online:</p>\n\n<p dir=\"auto\">Now in another console, you can run the tool:</p>\n\n<h2 dir=\"auto\">If you need to uninstall, follow these steps:</h2>\n<div data-snippet-clipboard-copy-content=\"$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\"><pre><code>$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\n</code></pre></div>\n<h2 dir=\"auto\">Attack examples:</h2>\n<p dir=\"auto\">Brute force to find the directory</p>\n<div data-snippet-clipboard-copy-content=\"$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\"><pre><code>$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\n</code></pre></div>\n<p dir=\"auto\">Note: You can change the value of threads. If you have a good machine, you can try 800, 1200 each device has a different context.</p>\n<p dir=\"auto\">For SQL injection attack</p>\n<div data-snippet-clipboard-copy-content=\"$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n&quot;\"><pre><code>$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n\"\n</code></pre></div>\n<p dir=\"auto\">Note: Tamper is a resource to try to bypass the web application firewall</p>\n<p dir=\"auto\">To brute force auth system</p>\n<div data-snippet-clipboard-copy-content=\"0d1n --host 'http://site.com/auth.py' --post 'user=admin&amp;password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n&quot;\"><pre><code>0d1n --host 'http://site.com/auth.py' --post 'user=admin&amp;password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n\"\n</code></pre></div>\n<p dir=\"auto\">Note: if you have a csrf token, you can use argv to get this token for each request and brute.</p>\n<p dir=\"auto\">Search SQLi in hard mode in login system with csrf token:</p>\n<div data-snippet-clipboard-copy-content=\"0d1n  --host &quot;http://127.0.0.1/vulnerabilities/sqli/index.php?id=^&quot; --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\"><pre><code>0d1n  --host \"http://127.0.0.1/vulnerabilities/sqli/index.php?id=^\" --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\n</code></pre></div>\n<p dir=\"auto\">Note: Load the cookies jar from the browser and save in cookies.txt to load.</p>\n<h2 dir=\"auto\">Notes External libs</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">To gain extreme performance, 0d1n uses a thread pool of POSIX threads. You can study this small library:\n<a href=\"https://github.com/Pithikos/C-Thread-Pool\">https://github.com/Pithikos/C-Thread-Pool</a></p>\n</li>\n<li>\n<p dir=\"auto\">The 0d1n uses OpenBSD/NetBSD functions to work with strings something like strlcat() and strlcpy() to prevent buffer overflow.\n<a href=\"https://man.openbsd.org/strlcpy.3\" rel=\"nofollow\">https://man.openbsd.org/strlcpy.3</a></p>\n</li>\n</ul>\n<h2 dir=\"auto\">Project Overview on cloc</h2>\n<div data-snippet-clipboard-copy-content=\"cooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\"><pre><code>cooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\n</code></pre></div>\n<p dir=\"auto\">Read the docs, and help menu when you execute the \"0d1n\" binary...</p>\n<p dir=\"auto\">Do you have any doubt about 0d1n? Please create an issue in this repository. I can help you.</p>\n<h2 dir=\"auto\">To study  old versions, look at the following:</h2>\n<p dir=\"auto\"><a href=\"http://sourceforge.net/projects/odin-security-tool/files/?source=navbar\" rel=\"nofollow\">http://sourceforge.net/projects/odin-security-tool/files/?source=navbar</a></p>\n<h2 dir=\"auto\">Point of attention</h2>\n<p dir=\"auto\">The purpose of this tool is to use in pentest, take attention if you have a proper authorization before to use that. I do not have responsibility for your actions. You can use a hammer to construct a house or destroy it, choose the law path, don't be a bad guy, remember.</p>\n</article>\n          </div></div>", "textContent": "\n            0d1n\n\n0d1n is a tool for automating customized attacks against web applications.\nThis tool is significantly faster because it uses thread pool and C language.\n\n\n\n0d1n is a tool for automating customized attacks against web applications.\nVideo demo: https://www.youtube.com/watch?v=1L22mbbVge0\nTool functions:\n\n\nBrute force login and passwords in auth forms\n\n\nDirectory disclosure ( use PATH list to the brute, and find HTTP status code )\n\n\nTest to find SQL Injection and XSS vulnerabilities\n\n\nTest to find SSRF\n\n\nTest to find Command injection\n\n\nOptions to load ANTI-CSRF token each request\n\n\nOptions to use random proxy per request\n\n\nOptions to use random useragent  per request\n\n\nOption for keep alive test (slowloris test)\n\n\nother functions.\n\n\nTo run and install, follow these steps:\nrequire libcurl-dev or libcurl-devel(on rpm linux based)\n$ git clone https://github.com/CoolerVoid/0d1n/\nIt would be best if you had lib curl to run. Look at the following to install:\n$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\n\nTo install follow this cmd:\n$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \n\nUp the view server to look at the reports online:\n\nNow in another console, you can run the tool:\n\nIf you need to uninstall, follow these steps:\n$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\n\nAttack examples:\nBrute force to find the directory\n$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\n\nNote: You can change the value of threads. If you have a good machine, you can try 800, 1200 each device has a different context.\nFor SQL injection attack\n$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n\"\n\nNote: Tamper is a resource to try to bypass the web application firewall\nTo brute force auth system\n0d1n --host 'http://site.com/auth.py' --post 'user=admin&password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n\"\n\nNote: if you have a csrf token, you can use argv to get this token for each request and brute.\nSearch SQLi in hard mode in login system with csrf token:\n0d1n  --host \"http://127.0.0.1/vulnerabilities/sqli/index.php?id=^\" --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\n\nNote: Load the cookies jar from the browser and save in cookies.txt to load.\nNotes External libs\n\n\nTo gain extreme performance, 0d1n uses a thread pool of POSIX threads. You can study this small library:\nhttps://github.com/Pithikos/C-Thread-Pool\n\n\nThe 0d1n uses OpenBSD/NetBSD functions to work with strings something like strlcat() and strlcpy() to prevent buffer overflow.\nhttps://man.openbsd.org/strlcpy.3\n\n\nProject Overview on cloc\ncooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\n\nRead the docs, and help menu when you execute the \"0d1n\" binary...\nDo you have any doubt about 0d1n? Please create an issue in this repository. I can help you.\nTo study  old versions, look at the following:\nhttp://sourceforge.net/projects/odin-security-tool/files/?source=navbar\nPoint of attention\nThe purpose of this tool is to use in pentest, take attention if you have a proper authorization before to use that. I do not have responsibility for your actions. You can use a hammer to construct a house or destroy it, choose the law path, don't be a bad guy, remember.\n\n          ", "length": 5121, "excerpt": "Tool for automating customized attacks against web applications. Fully made in C language with pthreads, it has fast performance.  - GitHub - CoolerVoid/0d1n: Tool for automating customized attacks...", "siteName": "GitHub", "success": false, "incomplete": true}}, "8": {"key": "http://jon.oberheide.org/0trace/", "value": {"success": false, "incomplete": true}}, "9": {"key": "http://3proxy.ru/", "value": {"success": false, "incomplete": true}}, "10": {"key": "http://blog.fefe.de/?ts=b6cea88d", "value": {"title": "Fefes Blog", "byline": null, "dir": null, "lang": "de", "content": "<div id=\"readability-page-1\" class=\"page\"><div>\n<li><a href=\"?ts=b6cea88d\">[l]</a> Es ist ja bekannt, dass Antiviren Schlangen\u00f6l sind, verkauft von unseri\u00f6sen Gesch\u00e4ftemachern, die ihren Kunden unwirksamen Pseudo-Schutz verkaufen.  Ich habe die Position seit vielen Jahren vertreten, und habe als Beispiel daf\u00fcr seit gut 10 Jahren <a href=\"http://www.fefe.de/antivirus/42.zip\">42.zip verlinkt</a>.  Dieses ZIP-Archiv beinhaltet Nullen.  Nur Nullen.  Keinen Code.  Null-Bytes.  VIELE Null-Bytes.  Das ganze gezippt, das Ergebnis wieder gezippt, das ganze nochmal gezippt, diverse Iterationen, so dass das ZIP-File am Ende 42K gro\u00df ist, aber die ausgepackten Daten einige Terabyte oder so beanspruchen auf der Platte.  Ein Antivirus kann das entweder scannen, dann den gesamten Plattenplatz und eine ganze Weile CPU-Zeit belegen, und solange das System unbrauchbar machen (und damit seine Mission nicht erf\u00fcllt haben), oder er aufgeben (und damit seine Mission nicht erf\u00fcllt haben).<p>Antivirenhersteller wissen nat\u00fcrlich, dass sie unseri\u00f6se Gesch\u00e4ftemacher sind, und kennen auch 42.zip.  Warum erz\u00e4hle ich das alles?  Yahoo hat mit McAfee einen Deal gemacht, und wenn man <a href=\"http://de.search.yahoo.com/search?p=fefe&amp;fr=yfp-t-501&amp;ei=UTF-8&amp;rd=r1\">bei deren Suchmaschine</a> <a href=\"http://search.yahoo.com/search?p=fefe+blog&amp;fr=yfp-t-501&amp;toggle=1&amp;cop=mss&amp;ei=UTF-8\">nach fefe</a> sucht, kriegt man bei fefe.de omin\u00f6se Warnungen, ich w\u00fcrde Trojaner oder Adware verteilen.</p><p>Kennt jemand einen Anwalt, der Lust hat, an Yahoo ein Exempel zu statuieren?</p><p>[<a href=\"//ptrace.fefe.de/yahoofefe.jpg\">Screenshot 1</a>, <a href=\"//ptrace.fefe.de/yahoofefe2.jpg\">Screenshot 2</a>] (Danke, Korbinian)\n</p></li></div></div>", "textContent": "\n[l] Es ist ja bekannt, dass Antiviren Schlangen\u00f6l sind, verkauft von unseri\u00f6sen Gesch\u00e4ftemachern, die ihren Kunden unwirksamen Pseudo-Schutz verkaufen.  Ich habe die Position seit vielen Jahren vertreten, und habe als Beispiel daf\u00fcr seit gut 10 Jahren 42.zip verlinkt.  Dieses ZIP-Archiv beinhaltet Nullen.  Nur Nullen.  Keinen Code.  Null-Bytes.  VIELE Null-Bytes.  Das ganze gezippt, das Ergebnis wieder gezippt, das ganze nochmal gezippt, diverse Iterationen, so dass das ZIP-File am Ende 42K gro\u00df ist, aber die ausgepackten Daten einige Terabyte oder so beanspruchen auf der Platte.  Ein Antivirus kann das entweder scannen, dann den gesamten Plattenplatz und eine ganze Weile CPU-Zeit belegen, und solange das System unbrauchbar machen (und damit seine Mission nicht erf\u00fcllt haben), oder er aufgeben (und damit seine Mission nicht erf\u00fcllt haben).Antivirenhersteller wissen nat\u00fcrlich, dass sie unseri\u00f6se Gesch\u00e4ftemacher sind, und kennen auch 42.zip.  Warum erz\u00e4hle ich das alles?  Yahoo hat mit McAfee einen Deal gemacht, und wenn man bei deren Suchmaschine nach fefe sucht, kriegt man bei fefe.de omin\u00f6se Warnungen, ich w\u00fcrde Trojaner oder Adware verteilen.Kennt jemand einen Anwalt, der Lust hat, an Yahoo ein Exempel zu statuieren?[Screenshot 1, Screenshot 2] (Danke, Korbinian)\n", "length": 1287, "excerpt": "Antivirenhersteller wissen nat\u00fcrlich, dass sie unseri\u00f6se Gesch\u00e4ftemacher sind, und kennen auch 42.zip.  Warum erz\u00e4hle ich das alles?  Yahoo hat mit McAfee einen Deal gemacht, und wenn man bei deren Suchmaschine nach fefe sucht, kriegt man bei fefe.de omin\u00f6se Warnungen, ich w\u00fcrde Trojaner oder Adware verteilen.", "siteName": null, "success": false, "incomplete": false}}, "11": {"key": "https://github.com/hahwul/a2sv", "value": {"title": "GitHub - hahwul/a2sv: Auto Scanning to SSL Vulnerability", "byline": "hahwul", "dir": null, "lang": "en", "content": "<div id=\"readability-page-1\" class=\"page\"><div data-target=\"readme-toc.content\">\n            <article itemprop=\"text\"><p dir=\"auto\"><a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/83d3746e5881c1867665223424263d8e604df233d0a11aae0813e0414d433943/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\" alt=\"MIT License\" data-canonical-src=\"https://img.shields.io/badge/license-MIT-blue.svg\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://cloud.githubusercontent.com/assets/13212227/26283701/dd5b48fe-3e67-11e7-8b54-96fb31c225b1.png\"><img src=\"https://cloud.githubusercontent.com/assets/13212227/26283701/dd5b48fe-3e67-11e7-8b54-96fb31c225b1.png\"></a></p>\n<h2 dir=\"auto\">1. A2SV?</h2>\n<p dir=\"auto\">Auto Scanning to SSL Vulnerability.</p>\n<p dir=\"auto\">HeartBleed, CCS Injection, SSLv3 POODLE, FREAK... etc</p>\n<p dir=\"auto\">A. Support Vulnerability</p>\n<div data-snippet-clipboard-copy-content=\"- CVE-2007-1858] Anonymous Cipher\n- CVE-2012-4929] CRIME(SPDY)\n- CVE-2014-0160] CCS Injection\n- CVE-2014-0224] HeartBleed\n- CVE-2014-3566] SSLv3 POODLE\n- CVE-2015-0204] FREAK Attack\n- CVE-2015-4000] LOGJAM Attack\n- CVE-2016-0800] SSLv2 DROWN\"><pre><code>- CVE-2007-1858] Anonymous Cipher\n- CVE-2012-4929] CRIME(SPDY)\n- CVE-2014-0160] CCS Injection\n- CVE-2014-0224] HeartBleed\n- CVE-2014-3566] SSLv3 POODLE\n- CVE-2015-0204] FREAK Attack\n- CVE-2015-4000] LOGJAM Attack\n- CVE-2016-0800] SSLv2 DROWN\n</code></pre></div>\n<p dir=\"auto\">B. Dev Plan</p>\n<div data-snippet-clipboard-copy-content=\"- PLAN] SSL ACCF\n- PLAN] SSL Information Analysis\"><pre><code>- PLAN] SSL ACCF\n- PLAN] SSL Information Analysis\n</code></pre></div>\n<h2 dir=\"auto\">2. How to Install?</h2>\n<p dir=\"auto\">A. Download(clone) &amp; Unpack A2SV</p>\n<div data-snippet-clipboard-copy-content=\"$ git clone https://github.com/hahwul/a2sv.git\n$ cd a2sv\"><pre><code>$ git clone https://github.com/hahwul/a2sv.git\n$ cd a2sv\n</code></pre></div>\n<p dir=\"auto\">B. Install Python Package / OpenSSL</p>\n<div data-snippet-clipboard-copy-content=\"$ pip install argparse\n$ pip install netaddr\n\n$ apt-get install openssl\"><pre><code>$ pip install argparse\n$ pip install netaddr\n\n$ apt-get install openssl\n</code></pre></div>\n<p dir=\"auto\">C. Run A2SV</p>\n\n<h2 dir=\"auto\">3. How to Use?</h2>\n<div data-snippet-clipboard-copy-content=\"usage: a2sv [-h] [-t TARGET] [-tf TARGETFILE] [-p PORT] [-m MODULE]\n[-d DISPLAY] [-u] [-v]\n\noptional arguments:\n  -h, --helpshow this help message and exit\n  -t TARGET, --target TARGET\nTarget URL and IP Address\n $ e.g -t 127.0.0.1\n  -tf TARGETFILE, --targetfile TARGETFILE\nTarget file(list) URL and IP Address\n $ e.g -tf ./target.list\n  -p PORT, --port PORT  Custom Port / Default: 443\n $ e.g -p 8080\n  -m MODULE, --module MODULE\nCheck SSL Vuln with one module\n[anonymous]: Anonymous Cipher\n[crime]: Crime(SPDY)\n[heart]: HeartBleed\n[ccs]: CCS Injection\n[poodle]: SSLv3 POODLE\n[freak]: OpenSSL FREAK\n[logjam]: OpenSSL LOGJAM\n[drown]: SSLv2 DROWN\n  -d DISPLAY, --display DISPLAY\nDisplay output\n[Y,y] Show output\n[N,n] Hide output\n  -o OUT, --out OUT Result write to file\n $ e.g -o /home/yourdir/result.txt\n  -u, --update  Update A2SV (GIT)\n  -v, --version Show Version\n\"><pre><code>usage: a2sv [-h] [-t TARGET] [-tf TARGETFILE] [-p PORT] [-m MODULE]\n[-d DISPLAY] [-u] [-v]\n\noptional arguments:\n  -h, --helpshow this help message and exit\n  -t TARGET, --target TARGET\nTarget URL and IP Address\n $ e.g -t 127.0.0.1\n  -tf TARGETFILE, --targetfile TARGETFILE\nTarget file(list) URL and IP Address\n $ e.g -tf ./target.list\n  -p PORT, --port PORT  Custom Port / Default: 443\n $ e.g -p 8080\n  -m MODULE, --module MODULE\nCheck SSL Vuln with one module\n[anonymous]: Anonymous Cipher\n[crime]: Crime(SPDY)\n[heart]: HeartBleed\n[ccs]: CCS Injection\n[poodle]: SSLv3 POODLE\n[freak]: OpenSSL FREAK\n[logjam]: OpenSSL LOGJAM\n[drown]: SSLv2 DROWN\n  -d DISPLAY, --display DISPLAY\nDisplay output\n[Y,y] Show output\n[N,n] Hide output\n  -o OUT, --out OUT Result write to file\n $ e.g -o /home/yourdir/result.txt\n  -u, --update  Update A2SV (GIT)\n  -v, --version Show Version\n\n</code></pre></div>\n<p dir=\"auto\">[Scan SSL Vulnerability]</p>\n<div data-snippet-clipboard-copy-content=\"$ python a2sv.py -t 127.0.0.1\n\n$ python a2sv.py -t 127.0.0.1 -m heartbleed\n\n$ python a2sv.py -t 127.0.0.1 -d n\n\n$ python a2sv.py -t 127.0.0.1 -p 8111\n\n$ python a2sv.py -tf target_list.txt\n\"><pre><code>$ python a2sv.py -t 127.0.0.1\n\n$ python a2sv.py -t 127.0.0.1 -m heartbleed\n\n$ python a2sv.py -t 127.0.0.1 -d n\n\n$ python a2sv.py -t 127.0.0.1 -p 8111\n\n$ python a2sv.py -tf target_list.txt\n\n</code></pre></div>\n<p dir=\"auto\">[Update A2SV]</p>\n<div data-snippet-clipboard-copy-content=\"$ python a2sv.py -u\n\n$ python a2sv.py --update\n\"><pre><code>$ python a2sv.py -u\n\n$ python a2sv.py --update\n\n</code></pre></div>\n<h2 dir=\"auto\">4. Support</h2>\n<p dir=\"auto\">The answer is very slow because it's a project that I could't careful about.</p>\n<h2 dir=\"auto\">5. Donate</h2>\n<p dir=\"auto\">I like coffee! I'm a coffee addict.<br>\n<a href=\"https://www.paypal.me/hahwul\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/15b09c935fc866626ffc0824ac5ff05197c19ca0406553d3b311f09acfde5b93/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f6469676974616c6173736574732f632f776562736974652f6c6f676f2f66756c6c2d746578742f70705f66635f686c2e737667\" height=\"50px\" data-canonical-src=\"https://www.paypalobjects.com/digitalassets/c/website/logo/full-text/pp_fc_hl.svg\"></a>\n<a href=\"https://www.buymeacoffee.com/hahwul\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/7beb1ce9d83217fda4e2ab8c7f975d8eeb4d74122634d14c008e4160aca6b415/68747470733a2f2f63646e2e6275796d6561636f666665652e636f6d2f627574746f6e732f64656661756c742d626c61636b2e706e67\" alt=\"Buy Me A Coffee\" height=\"50px\" data-canonical-src=\"https://cdn.buymeacoffee.com/buttons/default-black.png\"></a></p>\n<h2 dir=\"auto\">6. Screen shot</h2>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://cloud.githubusercontent.com/assets/13212227/26360322/c67cc642-4012-11e7-9db3-31f25a94222d.png\"><img src=\"https://cloud.githubusercontent.com/assets/13212227/26360322/c67cc642-4012-11e7-9db3-31f25a94222d.png\"></a></p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://cloud.githubusercontent.com/assets/13212227/26360319/c6381718-4012-11e7-895f-87e5f42a8269.png\"><img src=\"https://cloud.githubusercontent.com/assets/13212227/26360319/c6381718-4012-11e7-895f-87e5f42a8269.png\"></a></p>\n<h2 dir=\"auto\">7. Code Reference Site</h2>\n<div data-snippet-clipboard-copy-content=\"- poodle : https://github.com/supersam654/Poodle-Checker\n\n- heartbleed : https://github.com/sensepost/heartbleed-poc\n\n- ccs injection : https://github.com/Tripwire/OpenSSL-CCS-Inject-Test\n\n- freak : https://gist.github.com/martinseener/d50473228719a9554e6a\"><pre><code>- poodle : https://github.com/supersam654/Poodle-Checker\n\n- heartbleed : https://github.com/sensepost/heartbleed-poc\n\n- ccs injection : https://github.com/Tripwire/OpenSSL-CCS-Inject-Test\n\n- freak : https://gist.github.com/martinseener/d50473228719a9554e6a\n</code></pre></div>\n</article>\n          </div></div>", "textContent": "\n            \n\n1. A2SV?\nAuto Scanning to SSL Vulnerability.\nHeartBleed, CCS Injection, SSLv3 POODLE, FREAK... etc\nA. Support Vulnerability\n- CVE-2007-1858] Anonymous Cipher\n- CVE-2012-4929] CRIME(SPDY)\n- CVE-2014-0160] CCS Injection\n- CVE-2014-0224] HeartBleed\n- CVE-2014-3566] SSLv3 POODLE\n- CVE-2015-0204] FREAK Attack\n- CVE-2015-4000] LOGJAM Attack\n- CVE-2016-0800] SSLv2 DROWN\n\nB. Dev Plan\n- PLAN] SSL ACCF\n- PLAN] SSL Information Analysis\n\n2. How to Install?\nA. Download(clone) & Unpack A2SV\n$ git clone https://github.com/hahwul/a2sv.git\n$ cd a2sv\n\nB. Install Python Package / OpenSSL\n$ pip install argparse\n$ pip install netaddr\n\n$ apt-get install openssl\n\nC. Run A2SV\n\n3. How to Use?\nusage: a2sv [-h] [-t TARGET] [-tf TARGETFILE] [-p PORT] [-m MODULE]\n[-d DISPLAY] [-u] [-v]\n\noptional arguments:\n  -h, --helpshow this help message and exit\n  -t TARGET, --target TARGET\nTarget URL and IP Address\n $ e.g -t 127.0.0.1\n  -tf TARGETFILE, --targetfile TARGETFILE\nTarget file(list) URL and IP Address\n $ e.g -tf ./target.list\n  -p PORT, --port PORT  Custom Port / Default: 443\n $ e.g -p 8080\n  -m MODULE, --module MODULE\nCheck SSL Vuln with one module\n[anonymous]: Anonymous Cipher\n[crime]: Crime(SPDY)\n[heart]: HeartBleed\n[ccs]: CCS Injection\n[poodle]: SSLv3 POODLE\n[freak]: OpenSSL FREAK\n[logjam]: OpenSSL LOGJAM\n[drown]: SSLv2 DROWN\n  -d DISPLAY, --display DISPLAY\nDisplay output\n[Y,y] Show output\n[N,n] Hide output\n  -o OUT, --out OUT Result write to file\n $ e.g -o /home/yourdir/result.txt\n  -u, --update  Update A2SV (GIT)\n  -v, --version Show Version\n\n\n[Scan SSL Vulnerability]\n$ python a2sv.py -t 127.0.0.1\n\n$ python a2sv.py -t 127.0.0.1 -m heartbleed\n\n$ python a2sv.py -t 127.0.0.1 -d n\n\n$ python a2sv.py -t 127.0.0.1 -p 8111\n\n$ python a2sv.py -tf target_list.txt\n\n\n[Update A2SV]\n$ python a2sv.py -u\n\n$ python a2sv.py --update\n\n\n4. Support\nThe answer is very slow because it's a project that I could't careful about.\n5. Donate\nI like coffee! I'm a coffee addict.\n\n\n6. Screen shot\n\n\n7. Code Reference Site\n- poodle : https://github.com/supersam654/Poodle-Checker\n\n- heartbleed : https://github.com/sensepost/heartbleed-poc\n\n- ccs injection : https://github.com/Tripwire/OpenSSL-CCS-Inject-Test\n\n- freak : https://gist.github.com/martinseener/d50473228719a9554e6a\n\n\n          ", "length": 2284, "excerpt": "Auto Scanning to SSL Vulnerability. Contribute to hahwul/a2sv development by creating an account on GitHub.", "siteName": "GitHub", "success": false, "incomplete": true}}, "12": {"key": "https://github.com/MITRECND/abcd", "value": {"title": "GitHub - MITRECND/abcd: ActionScript ByteCode Disassembler", "byline": "MITRECND", "dir": null, "lang": "en", "content": "<div id=\"readability-page-1\" class=\"page\"><div><pre><code># Copyright (c) 2015 The MITRE Corporation. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n# SUCH DAMAGE.\n</code></pre></div><p dir=\"auto\">Approved for Public Release; Distribution Unlimited. Case Number 15-2781.</p></div>", "textContent": "# Copyright (c) 2015 The MITRE Corporation. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n# SUCH DAMAGE.\nApproved for Public Release; Distribution Unlimited. Case Number 15-2781.", "length": 1404, "excerpt": "ActionScript ByteCode Disassembler. Contribute to MITRECND/abcd development by creating an account on GitHub.", "siteName": "GitHub", "success": false, "incomplete": false}}, "13": {"key": "https://github.com/LandGrey/abuse-ssl-bypass-waf", "value": {"title": "GitHub - LandGrey/abuse-ssl-bypass-waf: Bypassing WAF by abusing SSL/TLS Ciphers", "byline": "LandGrey", "dir": null, "lang": "en", "content": "<div id=\"readability-page-1\" class=\"page\"><div data-target=\"readme-toc.content\">\n            <article itemprop=\"text\"><h2 dir=\"auto\">abuse-ssl-bypass-waf</h2>\n<p dir=\"auto\"><strong>Helping you find the SSL/TLS Cipher that WAF cannot decrypt and Server can decrypt same time</strong></p>\n<p dir=\"auto\">Referer article: <a href=\"https://0x09al.github.io/waf/bypass/ssl/2018/07/02/web-application-firewall-bypass.html\" rel=\"nofollow\">Bypassing Web-Application Firewalls by abusing SSL/TLS</a></p>\n<h4 dir=\"auto\">Idea</h4>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"/LandGrey/abuse-ssl-bypass-waf/blob/master/pictures/mind.png\"><img src=\"/LandGrey/abuse-ssl-bypass-waf/raw/master/pictures/mind.png\" alt=\"\"></a></p>\n<h4 dir=\"auto\">Usage</h4>\n<p dir=\"auto\"><code>python abuse-ssl-bypass-waf.py --help</code></p>\n<p dir=\"auto\">If you can find keyword or regex when hit the WAF page, you can use:</p>\n<p dir=\"auto\"><code>python abuse-ssl-bypass-waf.py -regex \"regex\" -target https://target.com</code></p>\n<p dir=\"auto\">or you cannot find keyword or regex when filter by WAF,you can use:</p>\n<p dir=\"auto\"><code>python abuse-ssl-bypass-waf.py -thread 4 -target https://target.com</code></p>\n<p dir=\"auto\"><strong>Notice</strong>: If you are worry about WAF drop the connection, you have better not use <code>-thread</code> option.</p>\n<h4 dir=\"auto\">Thirdparty</h4>\n<p dir=\"auto\"><strong>curl</strong></p>\n<p dir=\"auto\"><strong>sslcan</strong></p>\n<p dir=\"auto\"><strong>Notice</strong>: If your operation system is not Windows, you should be modify <code>config.py</code> \uff0cadjust <code>curl</code>  and <code>sslscan</code> path &amp; command values.</p>\n<h4 dir=\"auto\">Running</h4>\n<p dir=\"auto\"><strong>If you don't know what the type of the WAF, you can compare the html response content length and try to find the bypassing WAF ciphers</strong></p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"/LandGrey/abuse-ssl-bypass-waf/blob/master/pictures/example.png\"><img src=\"/LandGrey/abuse-ssl-bypass-waf/raw/master/pictures/example.png\" alt=\"\"></a></p>\n<p dir=\"auto\"><strong>knowing the hit WAF page keyword or regex:</strong></p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"/LandGrey/abuse-ssl-bypass-waf/blob/master/pictures/example-regex.png\"><img src=\"/LandGrey/abuse-ssl-bypass-waf/raw/master/pictures/example-regex.png\" alt=\"\"></a></p>\n<p dir=\"auto\"><strong>When using some SSL/TLS ciphers request the payload URL, If WAF keyword or regex not in html page, there is a way bypassing WAF using Cipher!</strong></p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"/LandGrey/abuse-ssl-bypass-waf/blob/master/pictures/example-regex-success.png\"><img src=\"/LandGrey/abuse-ssl-bypass-waf/raw/master/pictures/example-regex-success.png\" alt=\"\"></a></p>\n</article>\n          </div></div>", "textContent": "\n            abuse-ssl-bypass-waf\nHelping you find the SSL/TLS Cipher that WAF cannot decrypt and Server can decrypt same time\nReferer article: Bypassing Web-Application Firewalls by abusing SSL/TLS\nIdea\n\nUsage\npython abuse-ssl-bypass-waf.py --help\nIf you can find keyword or regex when hit the WAF page, you can use:\npython abuse-ssl-bypass-waf.py -regex \"regex\" -target https://target.com\nor you cannot find keyword or regex when filter by WAF,you can use:\npython abuse-ssl-bypass-waf.py -thread 4 -target https://target.com\nNotice: If you are worry about WAF drop the connection, you have better not use -thread option.\nThirdparty\ncurl\nsslcan\nNotice: If your operation system is not Windows, you should be modify config.py \uff0cadjust curl  and sslscan path & command values.\nRunning\nIf you don't know what the type of the WAF, you can compare the html response content length and try to find the bypassing WAF ciphers\n\nknowing the hit WAF page keyword or regex:\n\nWhen using some SSL/TLS ciphers request the payload URL, If WAF keyword or regex not in html page, there is a way bypassing WAF using Cipher!\n\n\n          ", "length": 1117, "excerpt": "Bypassing WAF by abusing SSL/TLS Ciphers. Contribute to LandGrey/abuse-ssl-bypass-waf development by creating an account on GitHub.", "siteName": "GitHub", "success": false, "incomplete": true}}, "14": {"key": "http://labs.portcullis.co.uk/tools/acccheck/", "value": {"title": "acccheck - Portcullis Labs", "byline": null, "dir": null, "lang": "en-US", "content": "<div id=\"readability-page-1\" class=\"page\"><div>\n\t\t\t\t\t\t\t<article id=\"post-260\">\n                                                                                                <div><!-- AddThis Button BEGIN -->\n<p>The tool is designed as a password dictionary attack tool that targets windows authentication via the SMB protocol. It is really a wrapper script around the \u2018smbclient\u2019 binary, and as a result is dependent on it for its execution.<span id=\"more-260\"></span></p>\n<p>The tool is designed as a password dictionary attack tool that targets windows authentication via the SMB protocol. It is really a wrapper script around the \u2018smbclient\u2019 binary, and as a result is dependent on it for its execution.</p>\n<p>The simplest way to run the tool is as follows:</p>\n<pre title=\"\">./acccheck.pl -t 10.10.10.1\n</pre>\n<p>This mode of execution attempts to connect to the target ADMIN$ share with the username \u2018Administrator\u2019 and a [BLANK] for the password.</p>\n<pre title=\"\">./acccheck.pl -t 10.10.10.1 -u test -p test\n</pre>\n<p>This mode of execution attempts to connect to the target IPC$ share with the username \u2018test\u2019 and a password \u2018test\u2019.</p>\n<p>Each -t, -u and -p flags can be substituted by -T, -U and -P, where each represents an input file rather than a single input from standard in.</p>\n<pre title=\"\">./acccheck.pl -T iplist -U userfile -P passwordfile\n</pre>\n<p>Only use -v mode on very small dictionaries, otherwise, this has the affect of slowing the scan down to the rate the system writes to standard out.</p>\n<p>Any username/password combinations found are written to a file called \u2018cracked\u2019 in the working directory.</p>\n<div onclick=\"if('undefined' == typeof event.target.href) document.getElementById('wpfb-file-link-1').click();\">\n  <p><a href=\"https://labs.portcullis.co.uk/download/acccheck-0-2-1.tar.gz\" target=\"_blank\" title=\"Download Acccheck-0-2-1 Tar\"><img src=\"https://labs.portcullis.co.uk/wp-includes/images/crystal/archive.png\" alt=\"Acccheck-0-2-1 Tar\"></a></p>\n  \n  <p>\n    9.8 KiB<br>\n    MD5 hash: ad14f58e04bc683fce5f72ef3cdb745d <br>\n    <a href=\"#\" onclick=\"return wpfilebase_filedetails(1);\">Details</a>\n  </p>\n  \n \n</div>\n<br> <br><!-- AddThis Advanced Settings above via filter on the_content --><!-- AddThis Advanced Settings below via filter on the_content --><!-- AddThis Button BEGIN -->\n<!-- AddThis Advanced Settings generic via filter on the_content --><!-- AddThis Share Buttons above via filter on the_content --><!-- AddThis Share Buttons below via filter on the_content --><!-- AddThis Share Buttons generic via filter on the_content --></div>\n                                                                \n</article>\n\t\t\t\t\n\n                        </div></div>", "textContent": "\n\t\t\t\t\t\t\t\n                                                                                                \nThe tool is designed as a password dictionary attack tool that targets windows authentication via the SMB protocol. It is really a wrapper script around the \u2018smbclient\u2019 binary, and as a result is dependent on it for its execution.\nThe tool is designed as a password dictionary attack tool that targets windows authentication via the SMB protocol. It is really a wrapper script around the \u2018smbclient\u2019 binary, and as a result is dependent on it for its execution.\nThe simplest way to run the tool is as follows:\n./acccheck.pl -t 10.10.10.1\n\nThis mode of execution attempts to connect to the target ADMIN$ share with the username \u2018Administrator\u2019 and a [BLANK] for the password.\n./acccheck.pl -t 10.10.10.1 -u test -p test\n\nThis mode of execution attempts to connect to the target IPC$ share with the username \u2018test\u2019 and a password \u2018test\u2019.\nEach -t, -u and -p flags can be substituted by -T, -U and -P, where each represents an input file rather than a single input from standard in.\n./acccheck.pl -T iplist -U userfile -P passwordfile\n\nOnly use -v mode on very small dictionaries, otherwise, this has the affect of slowing the scan down to the rate the system writes to standard out.\nAny username/password combinations found are written to a file called \u2018cracked\u2019 in the working directory.\n\n  \n  \n  \n    9.8 KiB\n    MD5 hash: ad14f58e04bc683fce5f72ef3cdb745d \n    Details\n  \n  \n \n\n \n\n                                                                \n\n\t\t\t\t\n\n                        ", "length": 1582, "excerpt": "The tool is designed as a password dictionary attack tool that targets windows authentication via the SMB protocol. It is really a wrapper script around the \u2018smbclient\u2019 binary, and as a result is dependent on it for its execution.", "siteName": "Portcullis Labs", "success": false, "incomplete": true}}, "15": {"key": "http://ucsniff.sourceforge.net/ace.html", "value": {"title": "ACE VoIP Directory Tool", "byline": null, "dir": null, "lang": null, "content": "<div id=\"readability-page-1\" class=\"page\"><div id=\"colone\">\n\n\t\t\t\n\n\t\t\t<p><strong>ACE (Automated Corporate Enumerator)</strong> is a simple yet powerful VoIP Corporate Directory enumeration tool that mimics the behavior of an IP Phone in order to download the name and extension entries that a given phone can display on its screen interface.  In the same way that the \"corporate directory\" feature of VoIP hardphones enables users to easily dial by name via their VoIP handsets, ACE was developed as a research idea born from \"VoIP Hopper\" to automate VoIP attacks that can be targeted against names in an enterprise Directory.  The concept is that in the future, attacks will be carried out against users based on their name, rather than targeting VoIP traffic against random RTP audio streams or IP addresses.  ACE works by using DHCP, TFTP, and HTTP in order to download the VoIP corporate directory.  It then outputs the directory to a text file, which can be used as input to other VoIP assessment tools.  ACE is a standalone utility, but its functions are integrated into UCSniff.</p>\n\n\t\t\t<h2>Under the Hood</h2>\n\n\t\t\t<p>ACE currently supports the VoIP corporate directory used in Cisco Unified IP Phones.  It works in the following way:</p>\n                <ul>\n                  <li>Spoofs CDP to get VVID</li>\n                  <li>Adds Voice VLAN Interface (VLAN Hop) - subsequent traffic is tagged with VVID</li>\n                  <li>Sends DHCP request tagged with VVID</li>\n                  <li>Decodes TFTP Server IP Address via DHCP Option 150</li>\n                  <li>Sends a TFTP request for IP Phone configuration file</li>\n\t\t  <li>Parses file, learning Corporate Directory URL</li>\n\t\t  <li>Sends an HTTP GET request for Directory</li>\n\t\t  <li>Parses XML Data, writing directory users to a formatted text file</li>\n                </ul>\n\n\n\t\t\t<h2>Usage</h2>\n\n\t\t\t<p>ACE can be used in one of two ways.  First, it can auto-discover the TFTP Server IP Address via DHCP, or (second) the user can specify the TFTP Server IP address as a command line parameter of the tool.  In either case, you must supply the MAC Address of the IP Phone with the -m option in order for the tool to correctly download the configuration file via TFTP.</p><p>\n\nACE v1.0: Automated Corporate (Data) Enumerator<br>\nUsage: ace [-i interface] [ -m mac address ] [ -t tftp server ip address | -c cdp mode | -v voice vlan id | -r vlan interface | -d verbose mode ]</p><p>\n\n-i </p><interface> (Mandatory) Interface for sniffing/sending packets<br>\n-m <mac address=\"\"> (Mandatory) MAC address of the victim IP phone<br>\n-t <tftp server=\"\" ip=\"\"> (Optional) tftp server ip address<br>\n-c <cdp mode=\"\" 0|1=\"\"> (Optional) 0 CDP sniff mode, 1 CDP spoof mode<br>\n-v <voice vlan=\"\" id=\"\"> (Optional) Enter the voice vlan ID<br>\n-r <vlan interface=\"\"> (Optional) Removes the VLAN interface<br>\n-d \t\t    (Optional) Verbose | debug mode<p>\n\nExample Usages:<br>\nUsage requires MAC Address of IP Phone supplied with -m option<br>\nUsage:  ace -t </p><tftp-server-ip> -m <mac-address><p>\n\nMode to automatically discover TFTP Server IP via DHCP Option 150 (-m)<br>\nExample:  ace -i eth0 -m 00:1E:F7:28:9C:8e</p><p>\n\nMode to specify IP Address of TFTP Server<br>\nExample:  ace -i eth0 -t 192.168.10.150 -m 00:1E:F7:28:9C:8e</p><p>\n\nMode to specify the Voice VLAN ID<br>\nExample: ace -i eth0 -v 96 -m 00:1E:F7:28:9C:8E</p><p>\n\nVerbose mode<br>\nExample: ace -i eth0 -v 96 -m 00:1E:F7:28:9C:8E -d</p><p>\n\nMode to remove vlan interface<br>\nExample: ace -r eth0.96</p><p>\n\nMode to auto-discover voice vlan ID in the listening mode for CDP<br>\nExample: ace -i eth0 -c 0 -m 00:1E:F7:28:9C:8E</p><p>\n\nMode to auto-discover voice vlan ID in the spoofing mode for CDP<br>\nExample: ace -i eth0 -c 1 -m 00:1E:F7:28:9C:8E</p>\n\n\n\n\t\t</mac-address></tftp-server-ip></vlan></voice></cdp></tftp></mac></interface></div></div>", "textContent": "\n\n\t\t\t\n\n\t\t\tACE (Automated Corporate Enumerator) is a simple yet powerful VoIP Corporate Directory enumeration tool that mimics the behavior of an IP Phone in order to download the name and extension entries that a given phone can display on its screen interface.  In the same way that the \"corporate directory\" feature of VoIP hardphones enables users to easily dial by name via their VoIP handsets, ACE was developed as a research idea born from \"VoIP Hopper\" to automate VoIP attacks that can be targeted against names in an enterprise Directory.  The concept is that in the future, attacks will be carried out against users based on their name, rather than targeting VoIP traffic against random RTP audio streams or IP addresses.  ACE works by using DHCP, TFTP, and HTTP in order to download the VoIP corporate directory.  It then outputs the directory to a text file, which can be used as input to other VoIP assessment tools.  ACE is a standalone utility, but its functions are integrated into UCSniff.\n\n\t\t\tUnder the Hood\n\n\t\t\tACE currently supports the VoIP corporate directory used in Cisco Unified IP Phones.  It works in the following way:\n                \n                  Spoofs CDP to get VVID\n                  Adds Voice VLAN Interface (VLAN Hop) - subsequent traffic is tagged with VVID\n                  Sends DHCP request tagged with VVID\n                  Decodes TFTP Server IP Address via DHCP Option 150\n                  Sends a TFTP request for IP Phone configuration file\n\t\t  Parses file, learning Corporate Directory URL\n\t\t  Sends an HTTP GET request for Directory\n\t\t  Parses XML Data, writing directory users to a formatted text file\n                \n\n\n\t\t\tUsage\n\n\t\t\tACE can be used in one of two ways.  First, it can auto-discover the TFTP Server IP Address via DHCP, or (second) the user can specify the TFTP Server IP address as a command line parameter of the tool.  In either case, you must supply the MAC Address of the IP Phone with the -m option in order for the tool to correctly download the configuration file via TFTP.\n\nACE v1.0: Automated Corporate (Data) Enumerator\nUsage: ace [-i interface] [ -m mac address ] [ -t tftp server ip address | -c cdp mode | -v voice vlan id | -r vlan interface | -d verbose mode ]\n\n-i  (Mandatory) Interface for sniffing/sending packets\n-m  (Mandatory) MAC address of the victim IP phone\n-t  (Optional) tftp server ip address\n-c  (Optional) 0 CDP sniff mode, 1 CDP spoof mode\n-v  (Optional) Enter the voice vlan ID\n-r  (Optional) Removes the VLAN interface\n-d \t\t    (Optional) Verbose | debug mode\n\nExample Usages:\nUsage requires MAC Address of IP Phone supplied with -m option\nUsage:  ace -t  -m \n\nMode to automatically discover TFTP Server IP via DHCP Option 150 (-m)\nExample:  ace -i eth0 -m 00:1E:F7:28:9C:8e\n\nMode to specify IP Address of TFTP Server\nExample:  ace -i eth0 -t 192.168.10.150 -m 00:1E:F7:28:9C:8e\n\nMode to specify the Voice VLAN ID\nExample: ace -i eth0 -v 96 -m 00:1E:F7:28:9C:8E\n\nVerbose mode\nExample: ace -i eth0 -v 96 -m 00:1E:F7:28:9C:8E -d\n\nMode to remove vlan interface\nExample: ace -r eth0.96\n\nMode to auto-discover voice vlan ID in the listening mode for CDP\nExample: ace -i eth0 -c 0 -m 00:1E:F7:28:9C:8E\n\nMode to auto-discover voice vlan ID in the spoofing mode for CDP\nExample: ace -i eth0 -c 1 -m 00:1E:F7:28:9C:8E\n\n\n\n\t\t", "length": 3321, "excerpt": "UCSniff is a VoIP and IP Video Security Assessment tool that enables security professionals and UC owners to identify vulnerabilities and mitigate risk in their UC environment", "siteName": null, "success": false, "incomplete": false}}}}