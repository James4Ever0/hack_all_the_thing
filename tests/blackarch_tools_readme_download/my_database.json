{"_default": {"1": {"key": "https://github.com/CoolerVoid/0d1n", "value": {"success": false, "incomplete": true}}, "2": {"key": "https://github.com/CoolerVoid/0d1n", "value": {"success": false, "incomplete": true}}, "3": {"key": "http://jon.oberheide.org/0trace/", "value": {"title": "0trace.py | Jon Oberheide", "byline": "Jon Oberheide", "dir": null, "lang": "en", "content": "<div id=\"readability-page-1\" class=\"page\"><div>\n<h2 id=\"description\">Description</h2>\n<p>0trace.py is a python port of <a href=\"http://lcamtuf.coredump.cx/\">Michal Zalewski\u2019s</a> 0trace hop enumeration tool. 0trace was originally announced on <a href=\"http://www.securityfocus.com/archive/1/456213/30/0/threaded\">Bugtraq</a> on January 6th:</p>\n<pre><code>I'd like to announce the availability of a free security reconnaissance /\nfirewall bypassing tool called 0trace. This tool enables the user to\nperform hop enumeration (\"traceroute\") within an established TCP\nconnection, such as a HTTP or SMTP session. This is opposed to sending\nstray packets, as traceroute-type tools usually do.\n\nThe important benefit of using an established connection and matching TCP\npackets to send a TTL-based probe is that such traffic is happily allowed\nthrough by many stateful firewalls and other defenses without further\ninspection (since it is related to an entry in the connection table).\n</code></pre>\n<h2 id=\"dependencies\">Dependencies</h2>\n<ul>\n<li><a href=\"http://libdnet.sourceforge.net/\">dnet</a></li>\n<li><a href=\"http://www.monkey.org/~dugsong/dpkt/\">dpkt</a></li>\n<li><a href=\"http://www.monkey.org/~dugsong/pypcap/\">pypcap</a></li>\n</ul>\n<h2 id=\"download\">Download</h2>\n<p>Downloads have been archived.</p>\n<h2 id=\"example-run\">Example Run</h2>\n<ul>\n<li><strong>Open a TCP connection</strong> - telnet 66.135.192.87 80</li>\n<li><strong>Start 0trace.py</strong> - ./0trace.py eth0 66.135.192.87 80</li>\n<li><strong>Initiate some TCP activity in telnet session</strong> - GET / HTTP/1.0</li>\n</ul>\n<!-- raw HTML omitted -->\n<pre><code>[+] Waiting for traffic from target on eth0...\n[+] Traffic acquired, waiting for a gap...\n[+] Target acquired: 192.168.0.10:54403 -&gt; 66.135.192.87:80 (3736223256/873025975)\n[+] Setting up a sniffer...\n[+] Sending probes...\n\nTRACE RESULTS\n-------------\n1 192.168.0.1\n3 68.87.187.29\n4 68.87.190.161\n5 68.87.190.157\n6 68.87.190.153\n7 68.87.190.149\n8 68.87.190.145\n9 68.87.190.141\n10 68.87.191.145\n11 12.116.11.101\n12 12.123.139.150\n13 12.122.10.134\n14 12.123.4.249\n15 192.205.33.158\n16 144.232.20.20\n17 144.232.26.109\n18 144.232.20.161\n19 144.232.15.142\n20 144.232.20.141\n21 144.232.20.113\n22 144.232.0.250\n23 144.228.110.122\n24 66.135.207.186\nTarget reached.\n</code></pre>\n\n\n      </div></div>", "textContent": "\nDescription\n0trace.py is a python port of Michal Zalewski\u2019s 0trace hop enumeration tool. 0trace was originally announced on Bugtraq on January 6th:\nI'd like to announce the availability of a free security reconnaissance /\nfirewall bypassing tool called 0trace. This tool enables the user to\nperform hop enumeration (\"traceroute\") within an established TCP\nconnection, such as a HTTP or SMTP session. This is opposed to sending\nstray packets, as traceroute-type tools usually do.\n\nThe important benefit of using an established connection and matching TCP\npackets to send a TTL-based probe is that such traffic is happily allowed\nthrough by many stateful firewalls and other defenses without further\ninspection (since it is related to an entry in the connection table).\n\nDependencies\n\ndnet\ndpkt\npypcap\n\nDownload\nDownloads have been archived.\nExample Run\n\nOpen a TCP connection - telnet 66.135.192.87 80\nStart 0trace.py - ./0trace.py eth0 66.135.192.87 80\nInitiate some TCP activity in telnet session - GET / HTTP/1.0\n\n\n[+] Waiting for traffic from target on eth0...\n[+] Traffic acquired, waiting for a gap...\n[+] Target acquired: 192.168.0.10:54403 -> 66.135.192.87:80 (3736223256/873025975)\n[+] Setting up a sniffer...\n[+] Sending probes...\n\nTRACE RESULTS\n-------------\n1 192.168.0.1\n3 68.87.187.29\n4 68.87.190.161\n5 68.87.190.157\n6 68.87.190.153\n7 68.87.190.149\n8 68.87.190.145\n9 68.87.190.141\n10 68.87.191.145\n11 12.116.11.101\n12 12.123.139.150\n13 12.122.10.134\n14 12.123.4.249\n15 192.205.33.158\n16 144.232.20.20\n17 144.232.26.109\n18 144.232.20.161\n19 144.232.15.142\n20 144.232.20.141\n21 144.232.20.113\n22 144.232.0.250\n23 144.228.110.122\n24 66.135.207.186\nTarget reached.\n\n\n\n      ", "length": 1684, "excerpt": "Jon Oberheide's website", "siteName": null, "success": false, "incomplete": true}}, "4": {"key": "https://github.com/CoolerVoid/0d1n", "value": {"title": "GitHub - CoolerVoid/0d1n: Tool for automating customized attacks against web applications. Fully made in C language with pthreads, it has fast performance.", "byline": "CoolerVoid", "dir": null, "lang": "en", "content": "<div id=\"readability-page-1\" class=\"page\"><div data-target=\"readme-toc.content\">\n            <article itemprop=\"text\"><h2 dir=\"auto\">0d1n</h2>\n<hr>\n<p dir=\"auto\">0d1n is a tool for automating customized attacks against web applications.\nThis tool is significantly faster because it uses thread pool and C language.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/overview1.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/overview1.png\" alt=\"Alt text\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/tables.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/tables.png\" alt=\"Alt text\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/datatables.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/datatables.png\" alt=\"Alt text\"></a>\n0d1n is a tool for automating customized attacks against web applications.\nVideo demo: <a href=\"https://www.youtube.com/watch?v=1L22mbbVge0\" rel=\"nofollow\">https://www.youtube.com/watch?v=1L22mbbVge0</a></p>\n<h2 dir=\"auto\">Tool functions:</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Brute force login and passwords in auth forms</p>\n</li>\n<li>\n<p dir=\"auto\">Directory disclosure ( use PATH list to the brute, and find HTTP status code )</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find SQL Injection and XSS vulnerabilities</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find SSRF</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find Command injection</p>\n</li>\n<li>\n<p dir=\"auto\">Options to load ANTI-CSRF token each request</p>\n</li>\n<li>\n<p dir=\"auto\">Options to use random proxy per request</p>\n</li>\n<li>\n<p dir=\"auto\">Options to use random useragent  per request</p>\n</li>\n<li>\n<p dir=\"auto\">Option for keep alive test (slowloris test)</p>\n</li>\n<li>\n<p dir=\"auto\">other functions.</p>\n</li>\n</ul>\n<h2 dir=\"auto\">To run and install, follow these steps:</h2>\n<p dir=\"auto\">require libcurl-dev or libcurl-devel(on rpm linux based)</p>\n<p dir=\"auto\">$ git clone <a href=\"https://github.com/CoolerVoid/0d1n/\">https://github.com/CoolerVoid/0d1n/</a></p>\n<p dir=\"auto\">It would be best if you had lib curl to run. Look at the following to install:</p>\n<div data-snippet-clipboard-copy-content=\"$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\"><pre><code>$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\n</code></pre></div>\n<p dir=\"auto\">To install follow this cmd:</p>\n<div data-snippet-clipboard-copy-content=\"$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \"><pre><code>$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \n</code></pre></div>\n<p dir=\"auto\">Up the view server to look at the reports online:</p>\n\n<p dir=\"auto\">Now in another console, you can run the tool:</p>\n\n<h2 dir=\"auto\">If you need to uninstall, follow these steps:</h2>\n<div data-snippet-clipboard-copy-content=\"$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\"><pre><code>$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\n</code></pre></div>\n<h2 dir=\"auto\">Attack examples:</h2>\n<p dir=\"auto\">Brute force to find the directory</p>\n<div data-snippet-clipboard-copy-content=\"$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\"><pre><code>$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\n</code></pre></div>\n<p dir=\"auto\">Note: You can change the value of threads. If you have a good machine, you can try 800, 1200 each device has a different context.</p>\n<p dir=\"auto\">For SQL injection attack</p>\n<div data-snippet-clipboard-copy-content=\"$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n&quot;\"><pre><code>$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n\"\n</code></pre></div>\n<p dir=\"auto\">Note: Tamper is a resource to try to bypass the web application firewall</p>\n<p dir=\"auto\">To brute force auth system</p>\n<div data-snippet-clipboard-copy-content=\"0d1n --host 'http://site.com/auth.py' --post 'user=admin&amp;password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n&quot;\"><pre><code>0d1n --host 'http://site.com/auth.py' --post 'user=admin&amp;password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n\"\n</code></pre></div>\n<p dir=\"auto\">Note: if you have a csrf token, you can use argv to get this token for each request and brute.</p>\n<p dir=\"auto\">Search SQLi in hard mode in login system with csrf token:</p>\n<div data-snippet-clipboard-copy-content=\"0d1n  --host &quot;http://127.0.0.1/vulnerabilities/sqli/index.php?id=^&quot; --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\"><pre><code>0d1n  --host \"http://127.0.0.1/vulnerabilities/sqli/index.php?id=^\" --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\n</code></pre></div>\n<p dir=\"auto\">Note: Load the cookies jar from the browser and save in cookies.txt to load.</p>\n<h2 dir=\"auto\">Notes External libs</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">To gain extreme performance, 0d1n uses a thread pool of POSIX threads. You can study this small library:\n<a href=\"https://github.com/Pithikos/C-Thread-Pool\">https://github.com/Pithikos/C-Thread-Pool</a></p>\n</li>\n<li>\n<p dir=\"auto\">The 0d1n uses OpenBSD/NetBSD functions to work with strings something like strlcat() and strlcpy() to prevent buffer overflow.\n<a href=\"https://man.openbsd.org/strlcpy.3\" rel=\"nofollow\">https://man.openbsd.org/strlcpy.3</a></p>\n</li>\n</ul>\n<h2 dir=\"auto\">Project Overview on cloc</h2>\n<div data-snippet-clipboard-copy-content=\"cooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\"><pre><code>cooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\n</code></pre></div>\n<p dir=\"auto\">Read the docs, and help menu when you execute the \"0d1n\" binary...</p>\n<p dir=\"auto\">Do you have any doubt about 0d1n? Please create an issue in this repository. I can help you.</p>\n<h2 dir=\"auto\">To study  old versions, look at the following:</h2>\n<p dir=\"auto\"><a href=\"http://sourceforge.net/projects/odin-security-tool/files/?source=navbar\" rel=\"nofollow\">http://sourceforge.net/projects/odin-security-tool/files/?source=navbar</a></p>\n<h2 dir=\"auto\">Point of attention</h2>\n<p dir=\"auto\">The purpose of this tool is to use in pentest, take attention if you have a proper authorization before to use that. I do not have responsibility for your actions. You can use a hammer to construct a house or destroy it, choose the law path, don't be a bad guy, remember.</p>\n</article>\n          </div></div>", "textContent": "\n            0d1n\n\n0d1n is a tool for automating customized attacks against web applications.\nThis tool is significantly faster because it uses thread pool and C language.\n\n\n\n0d1n is a tool for automating customized attacks against web applications.\nVideo demo: https://www.youtube.com/watch?v=1L22mbbVge0\nTool functions:\n\n\nBrute force login and passwords in auth forms\n\n\nDirectory disclosure ( use PATH list to the brute, and find HTTP status code )\n\n\nTest to find SQL Injection and XSS vulnerabilities\n\n\nTest to find SSRF\n\n\nTest to find Command injection\n\n\nOptions to load ANTI-CSRF token each request\n\n\nOptions to use random proxy per request\n\n\nOptions to use random useragent  per request\n\n\nOption for keep alive test (slowloris test)\n\n\nother functions.\n\n\nTo run and install, follow these steps:\nrequire libcurl-dev or libcurl-devel(on rpm linux based)\n$ git clone https://github.com/CoolerVoid/0d1n/\nIt would be best if you had lib curl to run. Look at the following to install:\n$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\n\nTo install follow this cmd:\n$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \n\nUp the view server to look at the reports online:\n\nNow in another console, you can run the tool:\n\nIf you need to uninstall, follow these steps:\n$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\n\nAttack examples:\nBrute force to find the directory\n$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\n\nNote: You can change the value of threads. If you have a good machine, you can try 800, 1200 each device has a different context.\nFor SQL injection attack\n$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n\"\n\nNote: Tamper is a resource to try to bypass the web application firewall\nTo brute force auth system\n0d1n --host 'http://site.com/auth.py' --post 'user=admin&password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n\"\n\nNote: if you have a csrf token, you can use argv to get this token for each request and brute.\nSearch SQLi in hard mode in login system with csrf token:\n0d1n  --host \"http://127.0.0.1/vulnerabilities/sqli/index.php?id=^\" --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\n\nNote: Load the cookies jar from the browser and save in cookies.txt to load.\nNotes External libs\n\n\nTo gain extreme performance, 0d1n uses a thread pool of POSIX threads. You can study this small library:\nhttps://github.com/Pithikos/C-Thread-Pool\n\n\nThe 0d1n uses OpenBSD/NetBSD functions to work with strings something like strlcat() and strlcpy() to prevent buffer overflow.\nhttps://man.openbsd.org/strlcpy.3\n\n\nProject Overview on cloc\ncooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\n\nRead the docs, and help menu when you execute the \"0d1n\" binary...\nDo you have any doubt about 0d1n? Please create an issue in this repository. I can help you.\nTo study  old versions, look at the following:\nhttp://sourceforge.net/projects/odin-security-tool/files/?source=navbar\nPoint of attention\nThe purpose of this tool is to use in pentest, take attention if you have a proper authorization before to use that. I do not have responsibility for your actions. You can use a hammer to construct a house or destroy it, choose the law path, don't be a bad guy, remember.\n\n          ", "length": 5121, "excerpt": "Tool for automating customized attacks against web applications. Fully made in C language with pthreads, it has fast performance.  - GitHub - CoolerVoid/0d1n: Tool for automating customized attacks...", "siteName": "GitHub", "success": false, "incomplete": true}}, "5": {"key": "http://jon.oberheide.org/0trace/", "value": {"title": "0trace.py | Jon Oberheide", "byline": "Jon Oberheide", "dir": null, "lang": "en", "content": "<div id=\"readability-page-1\" class=\"page\"><div>\n<h2 id=\"description\">Description</h2>\n<p>0trace.py is a python port of <a href=\"http://lcamtuf.coredump.cx/\">Michal Zalewski\u2019s</a> 0trace hop enumeration tool. 0trace was originally announced on <a href=\"http://www.securityfocus.com/archive/1/456213/30/0/threaded\">Bugtraq</a> on January 6th:</p>\n<pre><code>I'd like to announce the availability of a free security reconnaissance /\nfirewall bypassing tool called 0trace. This tool enables the user to\nperform hop enumeration (\"traceroute\") within an established TCP\nconnection, such as a HTTP or SMTP session. This is opposed to sending\nstray packets, as traceroute-type tools usually do.\n\nThe important benefit of using an established connection and matching TCP\npackets to send a TTL-based probe is that such traffic is happily allowed\nthrough by many stateful firewalls and other defenses without further\ninspection (since it is related to an entry in the connection table).\n</code></pre>\n<h2 id=\"dependencies\">Dependencies</h2>\n<ul>\n<li><a href=\"http://libdnet.sourceforge.net/\">dnet</a></li>\n<li><a href=\"http://www.monkey.org/~dugsong/dpkt/\">dpkt</a></li>\n<li><a href=\"http://www.monkey.org/~dugsong/pypcap/\">pypcap</a></li>\n</ul>\n<h2 id=\"download\">Download</h2>\n<p>Downloads have been archived.</p>\n<h2 id=\"example-run\">Example Run</h2>\n<ul>\n<li><strong>Open a TCP connection</strong> - telnet 66.135.192.87 80</li>\n<li><strong>Start 0trace.py</strong> - ./0trace.py eth0 66.135.192.87 80</li>\n<li><strong>Initiate some TCP activity in telnet session</strong> - GET / HTTP/1.0</li>\n</ul>\n<!-- raw HTML omitted -->\n<pre><code>[+] Waiting for traffic from target on eth0...\n[+] Traffic acquired, waiting for a gap...\n[+] Target acquired: 192.168.0.10:54403 -&gt; 66.135.192.87:80 (3736223256/873025975)\n[+] Setting up a sniffer...\n[+] Sending probes...\n\nTRACE RESULTS\n-------------\n1 192.168.0.1\n3 68.87.187.29\n4 68.87.190.161\n5 68.87.190.157\n6 68.87.190.153\n7 68.87.190.149\n8 68.87.190.145\n9 68.87.190.141\n10 68.87.191.145\n11 12.116.11.101\n12 12.123.139.150\n13 12.122.10.134\n14 12.123.4.249\n15 192.205.33.158\n16 144.232.20.20\n17 144.232.26.109\n18 144.232.20.161\n19 144.232.15.142\n20 144.232.20.141\n21 144.232.20.113\n22 144.232.0.250\n23 144.228.110.122\n24 66.135.207.186\nTarget reached.\n</code></pre>\n\n\n      </div></div>", "textContent": "\nDescription\n0trace.py is a python port of Michal Zalewski\u2019s 0trace hop enumeration tool. 0trace was originally announced on Bugtraq on January 6th:\nI'd like to announce the availability of a free security reconnaissance /\nfirewall bypassing tool called 0trace. This tool enables the user to\nperform hop enumeration (\"traceroute\") within an established TCP\nconnection, such as a HTTP or SMTP session. This is opposed to sending\nstray packets, as traceroute-type tools usually do.\n\nThe important benefit of using an established connection and matching TCP\npackets to send a TTL-based probe is that such traffic is happily allowed\nthrough by many stateful firewalls and other defenses without further\ninspection (since it is related to an entry in the connection table).\n\nDependencies\n\ndnet\ndpkt\npypcap\n\nDownload\nDownloads have been archived.\nExample Run\n\nOpen a TCP connection - telnet 66.135.192.87 80\nStart 0trace.py - ./0trace.py eth0 66.135.192.87 80\nInitiate some TCP activity in telnet session - GET / HTTP/1.0\n\n\n[+] Waiting for traffic from target on eth0...\n[+] Traffic acquired, waiting for a gap...\n[+] Target acquired: 192.168.0.10:54403 -> 66.135.192.87:80 (3736223256/873025975)\n[+] Setting up a sniffer...\n[+] Sending probes...\n\nTRACE RESULTS\n-------------\n1 192.168.0.1\n3 68.87.187.29\n4 68.87.190.161\n5 68.87.190.157\n6 68.87.190.153\n7 68.87.190.149\n8 68.87.190.145\n9 68.87.190.141\n10 68.87.191.145\n11 12.116.11.101\n12 12.123.139.150\n13 12.122.10.134\n14 12.123.4.249\n15 192.205.33.158\n16 144.232.20.20\n17 144.232.26.109\n18 144.232.20.161\n19 144.232.15.142\n20 144.232.20.141\n21 144.232.20.113\n22 144.232.0.250\n23 144.228.110.122\n24 66.135.207.186\nTarget reached.\n\n\n\n      ", "length": 1684, "excerpt": "Jon Oberheide's website", "siteName": null, "success": false, "incomplete": true}}, "6": {"key": "https://github.com/CoolerVoid/0d1n", "value": {"title": "GitHub - CoolerVoid/0d1n: Tool for automating customized attacks against web applications. Fully made in C language with pthreads, it has fast performance.", "byline": "CoolerVoid", "dir": null, "lang": "en", "content": "<div id=\"readability-page-1\" class=\"page\"><div data-target=\"readme-toc.content\">\n            <article itemprop=\"text\"><h2 dir=\"auto\">0d1n</h2>\n<hr>\n<p dir=\"auto\">0d1n is a tool for automating customized attacks against web applications.\nThis tool is significantly faster because it uses thread pool and C language.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/overview1.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/overview1.png\" alt=\"Alt text\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/tables.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/tables.png\" alt=\"Alt text\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CoolerVoid/0d1n/blob/master/doc/images/datatables.png\"><img src=\"https://github.com/CoolerVoid/0d1n/raw/master/doc/images/datatables.png\" alt=\"Alt text\"></a>\n0d1n is a tool for automating customized attacks against web applications.\nVideo demo: <a href=\"https://www.youtube.com/watch?v=1L22mbbVge0\" rel=\"nofollow\">https://www.youtube.com/watch?v=1L22mbbVge0</a></p>\n<h2 dir=\"auto\">Tool functions:</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Brute force login and passwords in auth forms</p>\n</li>\n<li>\n<p dir=\"auto\">Directory disclosure ( use PATH list to the brute, and find HTTP status code )</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find SQL Injection and XSS vulnerabilities</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find SSRF</p>\n</li>\n<li>\n<p dir=\"auto\">Test to find Command injection</p>\n</li>\n<li>\n<p dir=\"auto\">Options to load ANTI-CSRF token each request</p>\n</li>\n<li>\n<p dir=\"auto\">Options to use random proxy per request</p>\n</li>\n<li>\n<p dir=\"auto\">Options to use random useragent  per request</p>\n</li>\n<li>\n<p dir=\"auto\">Option for keep alive test (slowloris test)</p>\n</li>\n<li>\n<p dir=\"auto\">other functions.</p>\n</li>\n</ul>\n<h2 dir=\"auto\">To run and install, follow these steps:</h2>\n<p dir=\"auto\">require libcurl-dev or libcurl-devel(on rpm linux based)</p>\n<p dir=\"auto\">$ git clone <a href=\"https://github.com/CoolerVoid/0d1n/\">https://github.com/CoolerVoid/0d1n/</a></p>\n<p dir=\"auto\">It would be best if you had lib curl to run. Look at the following to install:</p>\n<div data-snippet-clipboard-copy-content=\"$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\"><pre><code>$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\n</code></pre></div>\n<p dir=\"auto\">To install follow this cmd:</p>\n<div data-snippet-clipboard-copy-content=\"$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \"><pre><code>$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \n</code></pre></div>\n<p dir=\"auto\">Up the view server to look at the reports online:</p>\n\n<p dir=\"auto\">Now in another console, you can run the tool:</p>\n\n<h2 dir=\"auto\">If you need to uninstall, follow these steps:</h2>\n<div data-snippet-clipboard-copy-content=\"$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\"><pre><code>$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\n</code></pre></div>\n<h2 dir=\"auto\">Attack examples:</h2>\n<p dir=\"auto\">Brute force to find the directory</p>\n<div data-snippet-clipboard-copy-content=\"$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\"><pre><code>$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\n</code></pre></div>\n<p dir=\"auto\">Note: You can change the value of threads. If you have a good machine, you can try 800, 1200 each device has a different context.</p>\n<p dir=\"auto\">For SQL injection attack</p>\n<div data-snippet-clipboard-copy-content=\"$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n&quot;\"><pre><code>$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n\"\n</code></pre></div>\n<p dir=\"auto\">Note: Tamper is a resource to try to bypass the web application firewall</p>\n<p dir=\"auto\">To brute force auth system</p>\n<div data-snippet-clipboard-copy-content=\"0d1n --host 'http://site.com/auth.py' --post 'user=admin&amp;password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n&quot;\"><pre><code>0d1n --host 'http://site.com/auth.py' --post 'user=admin&amp;password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n\"\n</code></pre></div>\n<p dir=\"auto\">Note: if you have a csrf token, you can use argv to get this token for each request and brute.</p>\n<p dir=\"auto\">Search SQLi in hard mode in login system with csrf token:</p>\n<div data-snippet-clipboard-copy-content=\"0d1n  --host &quot;http://127.0.0.1/vulnerabilities/sqli/index.php?id=^&quot; --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\"><pre><code>0d1n  --host \"http://127.0.0.1/vulnerabilities/sqli/index.php?id=^\" --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\n</code></pre></div>\n<p dir=\"auto\">Note: Load the cookies jar from the browser and save in cookies.txt to load.</p>\n<h2 dir=\"auto\">Notes External libs</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">To gain extreme performance, 0d1n uses a thread pool of POSIX threads. You can study this small library:\n<a href=\"https://github.com/Pithikos/C-Thread-Pool\">https://github.com/Pithikos/C-Thread-Pool</a></p>\n</li>\n<li>\n<p dir=\"auto\">The 0d1n uses OpenBSD/NetBSD functions to work with strings something like strlcat() and strlcpy() to prevent buffer overflow.\n<a href=\"https://man.openbsd.org/strlcpy.3\" rel=\"nofollow\">https://man.openbsd.org/strlcpy.3</a></p>\n</li>\n</ul>\n<h2 dir=\"auto\">Project Overview on cloc</h2>\n<div data-snippet-clipboard-copy-content=\"cooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\"><pre><code>cooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\n</code></pre></div>\n<p dir=\"auto\">Read the docs, and help menu when you execute the \"0d1n\" binary...</p>\n<p dir=\"auto\">Do you have any doubt about 0d1n? Please create an issue in this repository. I can help you.</p>\n<h2 dir=\"auto\">To study  old versions, look at the following:</h2>\n<p dir=\"auto\"><a href=\"http://sourceforge.net/projects/odin-security-tool/files/?source=navbar\" rel=\"nofollow\">http://sourceforge.net/projects/odin-security-tool/files/?source=navbar</a></p>\n<h2 dir=\"auto\">Point of attention</h2>\n<p dir=\"auto\">The purpose of this tool is to use in pentest, take attention if you have a proper authorization before to use that. I do not have responsibility for your actions. You can use a hammer to construct a house or destroy it, choose the law path, don't be a bad guy, remember.</p>\n</article>\n          </div></div>", "textContent": "\n            0d1n\n\n0d1n is a tool for automating customized attacks against web applications.\nThis tool is significantly faster because it uses thread pool and C language.\n\n\n\n0d1n is a tool for automating customized attacks against web applications.\nVideo demo: https://www.youtube.com/watch?v=1L22mbbVge0\nTool functions:\n\n\nBrute force login and passwords in auth forms\n\n\nDirectory disclosure ( use PATH list to the brute, and find HTTP status code )\n\n\nTest to find SQL Injection and XSS vulnerabilities\n\n\nTest to find SSRF\n\n\nTest to find Command injection\n\n\nOptions to load ANTI-CSRF token each request\n\n\nOptions to use random proxy per request\n\n\nOptions to use random useragent  per request\n\n\nOption for keep alive test (slowloris test)\n\n\nother functions.\n\n\nTo run and install, follow these steps:\nrequire libcurl-dev or libcurl-devel(on rpm linux based)\n$ git clone https://github.com/CoolerVoid/0d1n/\nIt would be best if you had lib curl to run. Look at the following to install:\n$ sudo apt-get install libcurl-dev\nor try libcurl4-de or libcurl*\n\nif rpm distro\n\n$ sudo yum install libcurl-devel\n\nTo install follow this cmd:\n$ cd 0d1n\n\n$ make; sudo make install USER=name_your_user; \n\n$ cd 0d1n_viewer; make; sudo make install USER=name_your_user; \n\nUp the view server to look at the reports online:\n\nNow in another console, you can run the tool:\n\nIf you need to uninstall, follow these steps:\n$ cd 0d1n; sudo make uninstall\n\n$ cd 0d1n_view; sudo make uninstall\n\n\nAttack examples:\nBrute force to find the directory\n$ 0d1n --host http://127.0.0.1/^ --payloads /opt/0d1n/payloads/dir_brute.txt --threads 500 --timeout 3 --log bartsimpsom4 --save_response\n\nNote: You can change the value of threads. If you have a good machine, you can try 800, 1200 each device has a different context.\nFor SQL injection attack\n$ 0d1n --host 'http://site.com/view/1^/product/^/' --payloads /opt/0d1n/payloads/sqli_list.txt --find_string_list /opt/0d1n/payloads/sqli_str2find_list.txt --log log1337 --tamper randcase --threads 800 --timeout 3 --save_response\\n\"\n\nNote: Tamper is a resource to try to bypass the web application firewall\nTo brute force auth system\n0d1n --host 'http://site.com/auth.py' --post 'user=admin&password=^' --payloads /opt/0d1n/payloads/wordlist.txt --log log007 --threads 500 --timeout 3\\n\"\n\nNote: if you have a csrf token, you can use argv to get this token for each request and brute.\nSearch SQLi in hard mode in login system with csrf token:\n0d1n  --host \"http://127.0.0.1/vulnerabilities/sqli/index.php?id=^\" --payloads /opt/0d1n/payloads/sqli.txt --find_string_list /opt/0d1n/payloads/find_responses.txt --token_name user_token --log logtest_fibonaci49 --cookie_jar /home/user_name/cookies.txt --save_response --tamper randcase --threads 100\n\nNote: Load the cookies jar from the browser and save in cookies.txt to load.\nNotes External libs\n\n\nTo gain extreme performance, 0d1n uses a thread pool of POSIX threads. You can study this small library:\nhttps://github.com/Pithikos/C-Thread-Pool\n\n\nThe 0d1n uses OpenBSD/NetBSD functions to work with strings something like strlcat() and strlcpy() to prevent buffer overflow.\nhttps://man.openbsd.org/strlcpy.3\n\n\nProject Overview on cloc\ncooler@gentoo:~/codes$ cloc 0d1n/\n     937 text files.\n     532 unique files.                                          \n     451 files ignored.\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJavaScript                     361           9951          15621          52178\nC                               51           4986           4967          26642\nC/C++ Header                    30           1184           2858           4295\nCSS                             10            434            369           2142\nHTML                             7             59              0           1616\nTeX                              2             52              4            206\nMarkdown                         3             81              0            137\nmake                             4             36              9            130\nBourne Shell                     2              0              0              4\n-------------------------------------------------------------------------------\nSUM:                           487          16835          23846          91213\n-------------------------------------------------------------------------------\n\n\nRead the docs, and help menu when you execute the \"0d1n\" binary...\nDo you have any doubt about 0d1n? Please create an issue in this repository. I can help you.\nTo study  old versions, look at the following:\nhttp://sourceforge.net/projects/odin-security-tool/files/?source=navbar\nPoint of attention\nThe purpose of this tool is to use in pentest, take attention if you have a proper authorization before to use that. I do not have responsibility for your actions. You can use a hammer to construct a house or destroy it, choose the law path, don't be a bad guy, remember.\n\n          ", "length": 5121, "excerpt": "Tool for automating customized attacks against web applications. Fully made in C language with pthreads, it has fast performance.  - GitHub - CoolerVoid/0d1n: Tool for automating customized attacks...", "siteName": "GitHub", "success": false, "incomplete": true}}}}